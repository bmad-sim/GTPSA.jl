# sinc in Julia has different definition than GTPSA
# In Julia: sinc(x) = sin(pi*x)/(pi*x)
# in C GTPSA: sinc(x) = sin(x)/x
# To make sinc agree:
function __t_sinc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_scl!(ct1.tpsa, convert(Cdouble, pi), tpsa)
  mad_ctpsa_sinc!(tpsa, tpsa)
  return tpsa
end

function __t_sinc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_scl!(ctpsa1, convert(Cdouble, pi), ctpsa1)
  mad_ctpsa_sinc!(ctpsa1, ctpsa1)
  return ctpsa1
end

__t_sinc(a) = (@inline; sinc(a))

# asinc is not in Julia, but in C is asinc(x) = asin(x)*x
# To give similiar behavior, define asinc(x) = asin(pi*x)*(piâ¨°x)
function __t_asinc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_scl!(ct1.tpsa, convert(Cdouble, pi), tpsa)
  mad_ctpsa_asinc!(tpsa, tpsa)
  return tpsa
end

function __t_asinc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_scl!(ctpsa1, convert(Cdouble, pi), ctpsa1)
  mad_ctpsa_asinc!(ctpsa1, ctpsa1)
  return ctpsa1
end

# asinc undefined for not TPSA types (not in Base)

function __t_sinhc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_scl!(ct1.tpsa, convert(Cdouble, pi), tpsa)
  mad_ctpsa_sinhc!(tpsa, tpsa)
  return tpsa
end

function __t_sinhc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_scl!(ctpsa1, convert(Cdouble, pi), ctpsa1)
  mad_ctpsa_sinhc!(ctpsa1, ctpsa1)
  return ctpsa1
end

# sinhc undefined for not TPSA types (not in Base)

# asinhc is not in Julia, but in C is asinc(x) = asin(x)*x
# To give similiar behavior, define asinc(x) = asin(pi*x)*(pi*x)
function __t_asinhc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_scl!(ct1.tpsa, convert(Cdouble, pi), tpsa)
  mad_ctpsa_asinhc!(tpsa, tpsa)
  return tpsa
end

function __t_asinhc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_scl!(ctpsa1, convert(Cdouble, pi), ctpsa1)
  mad_ctpsa_asinhc!(ctpsa1, ctpsa1)
  return ctpsa1
end

# asinhc undefined for not TPSA types (not in Base)

# These functions are not implemented in the GTPSA C library, so they 
# are implemented below
function __t_csc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_sin!(ct1.tpsa, tpsa)
  mad_ctpsa_inv!(tpsa, convert(ComplexF64, 1.0), tpsa)
  return tpsa
end

function __t_csc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_sin!(ctpsa1, ctpsa1)
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  return ctpsa1
end

__t_csc(a) = (@inline; csc(a))

function __t_sec(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_cos!(ct1.tpsa, tpsa)
  mad_ctpsa_inv!(tpsa, convert(ComplexF64, 1.0), tpsa)
  return tpsa
end

function __t_sec(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_cos!(ctpsa1, ctpsa1)
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  return ctpsa1
end

__t_sec(a) = (@inline; sec(a))

function __t_csch(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_sinh!(ct1.tpsa, tpsa)
  mad_ctpsa_inv!(tpsa, convert(ComplexF64, 1.0), tpsa)
  return tpsa
end

function __t_csch(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_sinh!(ctpsa1, ctpsa1)
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  return ctpsa1
end

__t_csch(a) = (@inline; csch(a))

function __t_sech(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_cosh!(ct1.tpsa, tpsa)
  mad_ctpsa_inv!(tpsa, convert(ComplexF64, 1.0), tpsa)
  return tpsa
end

function __t_sech(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_cosh!(ctpsa1, ctpsa1)
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  return ctpsa1
end

__t_sech(a) = (@inline; sech(a))

function __t_acsc(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_inv!(ct1.tpsa, convert(ComplexF64, 1.0), tpsa)
  mad_ctpsa_asin!(tpsa, tpsa)
  return tpsa
end

function __t_acsc(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  mad_ctpsa_asin!(ctpsa1, ctpsa1)
  return ctpsa1
end

__t_acsc(a) = (@inline; acsc(a))

function __t_asec(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_inv!(ct1.tpsa, convert(ComplexF64, 1.0), tpsa)
  mad_ctpsa_acos!(tpsa, tpsa)
  return tpsa
end

function __t_asec(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  mad_ctpsa_acos!(ctpsa1, ctpsa1)
  return ctpsa1
end

__t_asec(a) = (@inline; asec(a))

function __t_acsch(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_inv!(ct1.tpsa, convert(ComplexF64, 1.0), tpsa)
  mad_ctpsa_asinh!(tpsa, tpsa)
  return tpsa
end

function __t_acsch(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  mad_ctpsa_asinh!(ctpsa1, ctpsa1)
  return ctpsa1
end

__t_acsch(a) = (@inline; acsch(a))

function __t_asech(ct1::ComplexTPS)::Ptr{CTPSA}
  tpsa = get_rtemp!(ct1)
  mad_ctpsa_inv!(ct1.tpsa, convert(ComplexF64, 1.0), tpsa)
  mad_ctpsa_acosh!(tpsa, tpsa)
  return tpsa
end

function __t_asech(ctpsa1::Ptr{CTPSA})::Ptr{CTPSA}
  mad_ctpsa_inv!(ctpsa1, convert(ComplexF64, 1.0), ctpsa1)
  mad_ctpsa_acosh!(ctpsa1, ctpsa1)
  return ctpsa1
end

__t_asech(a) = (@inline; asech(a))