var documenterSearchIndex = {"docs":
[{"location":"constructors/#Constructors","page":"Constructors","title":"Constructors","text":"","category":"section"},{"location":"constructors/#Descriptor","page":"Constructors","title":"Descriptor","text":"","category":"section"},{"location":"constructors/","page":"Constructors","title":"Constructors","text":"Descriptor","category":"page"},{"location":"constructors/#GTPSA.Descriptor","page":"Constructors","title":"GTPSA.Descriptor","text":"Descriptor(nv::Integer, mo::Integer)::Descriptor\n\nCreates a TPSA Descriptor with nv variables of maximum order mo.\n\nInput\n\nnv – Number of variables in the TPSA\nmo – Maximum order of the variables in the TPSA\n\n\n\n\n\nDescriptor(mos::Vector{<:Integer})::Descriptor\n\nCreates a TPSA Descriptor with length(mos) variables with individual max  orders specified in the Vector mos. \n\nInput\n\nmos – Vector of the individual max orders of each variable\n\n\n\n\n\nDescriptor(nv::Integer, mo::Integer, np::Integer, po::Integer)::Descriptor\n\nCreates a TPSA Descriptor with nv variables of maximum order mo, and np parameters of maximum order po (<= mo).\n\nInput\n\nnv – Number of variables in the TPSA\nmo – Maximum order of the variables in the TPSA\nnp – Number of parameters in the TPSA\npo – Maximum order of the parameters (<= mo) in the TPSA\n\n\n\n\n\nDescriptor(mos::Vector{<:Integer}, pos::Vector{<:Integer})::Descriptor\n\nCreates a TPSA Descriptor with length(mos) variables with individual max  orders specified in mos, and length(pos) parameters with individual max  orders specified in pos.\n\nInput\n\nmos – Vector of the individual max orders of each variable\npos – Vector of the individual max orders of each parameter\n\n\n\n\n\n","category":"type"},{"location":"constructors/#TPS","page":"Constructors","title":"TPS","text":"","category":"section"},{"location":"constructors/","page":"Constructors","title":"Constructors","text":"TPS","category":"page"},{"location":"constructors/#GTPSA.TPS","page":"Constructors","title":"GTPSA.TPS","text":"TPS()::TPS\n\nCreates a new Truncated Power Series TPS using the most  recently-defined Descriptor\n\n\n\n\n\nTPS(d::Descriptor)::TPS\n\nCreates a new Truncated Power Series TPS based on d \n\nInput\n\nd – Descriptor\n\n\n\n\n\nTPS(t1::TPS)::TPS\n\nCopy constructor for TPS\n\nInput\n\nt1 – TPS to create new copy of\n\n\n\n\n\nTPS(a::Real)::TPS\n\nPromotes the scalar a to a new TPS using the most  recently-defined Descriptor.\n\nInput\n\na – Scalar to create new TPS with\n\n\n\n\n\nTPS(a::Real, t1::TPS)::TPS\n\nPromotes the scalar a to a new TPS using the same  Descriptor as t1\n\nInput\n\na  – Scalar to create new TPS with\nt1 – TPS to use same Descriptor as\n\n\n\n\n\n","category":"type"},{"location":"constructors/#ComplexTPS","page":"Constructors","title":"ComplexTPS","text":"","category":"section"},{"location":"constructors/","page":"Constructors","title":"Constructors","text":"ComplexTPS","category":"page"},{"location":"constructors/#GTPSA.ComplexTPS","page":"Constructors","title":"GTPSA.ComplexTPS","text":"ComplexTPS()::ComplexTPS\n\nCreates a new Complex Truncated Power Series ComplexTPS using  the most recently-defined Descriptor\n\n\n\n\n\nComplexTPS(d::Descriptor)::ComplexTPS\n\nCreates a new Complex Truncated Power Series ComplexTPS based on d \n\nInput\n\nd – Descriptor\n\n\n\n\n\nComplexTPS(ct1::ComplexTPS)::ComplexTPS\n\nCopy constructor for ComplexTPS\n\nInput\n\nct1 – ComplexTPS to create new copy of\n\n\n\n\n\nComplexTPS(t1::TPS)::ComplexTPS\n\nCreates a new copy of TPS promoted to a ComplexTPS\n\nInput\n\nt1 – TPS to create new ComplexTPS from\n\n\n\n\n\nComplexTPS(a::Number)::ComplexTPS\n\nPromotes the scalar a to a new ComplexTPS using the most  recently-defined Descriptor\n\nInput\n\na – Scalar to create new ComplexTPS with\n\n\n\n\n\nComplexTPS(a::Number, ct1::ComplexTPS)::ComplexTPS\n\nPromotes the scalar a to a new ComplexTPS using the same Descriptor as ct1\n\nInput\n\na    – Scalar to create new ComplexTPS with\nct1  – ComplexTPS to use same Descriptor as\n\n\n\n\n\nComplexTPS(a::Number, t1::TPS)::ComplexTPS\n\nPromotes the scalar a to a new ComplexTPS using the same Descriptor as t1\n\nInput\n\na   – Scalar to create new ComplexTPS with\nt1  – TPS to use same Descriptor as\n\n\n\n\n\n","category":"type"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Definitions","page":"Usage","title":"Definitions","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In some use cases, the TPS may define the evolution of some state x of a dynamical system, e.g. x_f = mathcalM(x_ik), where k is some defined external parameter. When mathcalM is expanded in powers of Delta x_i and Delta k, this is referred to as a Taylor map. x is referred to as a map variable or variable, as its evolution is defined by the TPS. k, which does not evolve with mathcalM, is referred to as a parameter. GTPSA allows distinction between map variables and parameters, as well as the individual orders for each, to speed up Taylor map analyses.","category":"page"},{"location":"usage/#Defining-the-TPSA","page":"Usage","title":"Defining the TPSA","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The Descriptor defines all information about the TPSA, including the number of variables, order for each variable, number of parameters, and order for each parameter. The constructors for a Descriptor are:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# Descriptor for 2 variables with max order 10 for each (equivalent definitions)\nd1 = Descriptor(2, 10) \nd1 = Descriptor([10, 10])\n\n# Descriptor for 3 variables with max order 4 for each, and 1 parameter with max order 2 (equivalent definitions)\nd2 = Descriptor(3, 4, 1, 2)     \nd2 = Descriptor([4, 4, 4], [2]) \n\n# Descriptor for 2 variables with max orders 6, 5 respectively and 1 parameter with max order 4\nd3 = Descriptor([6, 5], [4])","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"See Constructors for the documentation of each Descriptor constructor.","category":"page"},{"location":"usage/#Calculating-a-TPS","page":"Usage","title":"Calculating a TPS","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"After defining a Descriptor for the TPSA, generally one would want the variables or parameters in the descriptor, defined as TPSs or ComplexTPSs. The convenience functions vars and params, and their complex counterparts complexvars and complexparams, are provided which return a Vector of all variables in the TPSA as TPSs (or ComplexTPSs) themselves. For example, suppose we wish to calculate the Taylor series for f(x_1x_2k_1) = cos(x_1) + sin(k_1)sqrt1+x_2 to 10th order in x_1 and x_2 but only 5th order in the parameter k_1:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"d = Descriptor(2, 10, 1, 5)  # or equivalently Descriptor([10, 10], [5])\n\nx = vars(d)     # Returns a Vector of each variable as a TPS\nk = params(d)   # Returns a Vector of each parameter as a TPS\n\n# f is a TPS containing the result\nf = cos(x[1]) + sin(k[1]) * sqrt(1 + x[2])","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"A blank TPS or ComplexTPS, with all coefficients equal to zero, can be created using TPS(d) or ComplexTPS(d) respectively. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"vars\ncomplexvars\nparams\ncomplexparams","category":"page"},{"location":"usage/#GTPSA.vars","page":"Usage","title":"GTPSA.vars","text":"vars(d::Descriptor)::Vector{TPS}\n\nReturns TPSs corresponding to the variables for the Descriptor.\n\nInput\n\nd – TPSA Descriptor\n\nOutput\n\nx – Vector containing unit TPSs corresponding to each variable\n\n\n\n\n\n","category":"function"},{"location":"usage/#GTPSA.complexvars","page":"Usage","title":"GTPSA.complexvars","text":"complexvars(d::Descriptor)::Vector{ComplexTPS}\n\nReturns ComplexTPSs corresponding to the variables for the Descriptor.\n\nInput\n\nd – TPSA Descriptor\n\nOutput\n\nx – Vector containing unit ComplexTPSs corresponding to each variable\n\n\n\n\n\n","category":"function"},{"location":"usage/#GTPSA.params","page":"Usage","title":"GTPSA.params","text":"params(d::Descriptor)::Vector{TPS}\n\nReturns TPSs corresponding to the parameters for the Descriptor.\n\nInput\n\nd – TPSA Descriptor\n\nOutput\n\nk – Vector containing unit TPSs corresponding to each parameter\n\n\n\n\n\n","category":"function"},{"location":"usage/#GTPSA.complexparams","page":"Usage","title":"GTPSA.complexparams","text":"complexparams(d::Descriptor)::Vector{TPS}\n\nReturns ComplexTPSs corresponding to the parameters for the Descriptor.\n\nInput\n\nd – TPSA Descriptor\n\nOutput\n\nk – Vector containing unit ComplexTPSs corresponding to each parameter\n\n\n\n\n\n","category":"function"},{"location":"usage/#Monomial-Indexing","page":"Usage","title":"Monomial Indexing","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"The monomial coefficients in a TPS t can be get/set with two methods of indexing:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"By Order: t[<x_1 order>, ..., <x_nv order>, <k_1 order>, ..., <k_np order>]. For example, for a TPS with variables x_1, x_2 and parameter k_1, the x_1^3x_2^1k_1^2 monomial coefficient is accessed with t[3,1,2]. The 0th order part (the scalar part) of the TPS is indexed with t[0,0,0] or equivalently t[0], as leaving out trailing zeros for unincluded variables/parameters is allowed.\nBy Var => Order, Param => Order: t[<ix_var> => <order>, ..., params=(<ix_param> => <order>, ...)]. This method of indexing is convenient when a TPS contains many variables and parameters. For example, for a TPS with variables x_1, x_2 and parameter k_1, the x_1^3x_2^1k_1^2 monomial is accessed with t[1=>3, 2=>1, params=(1=>2,)]. The scalar part of the TPS cannot be set with this method.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# Descriptor for 2 variables with order 5, and 2 parameters with orders 5\nd = Descriptor(2, 5, 2, 5)\nx = vars(d)\nx1 = x[1]\nx2 = x[2]\nk = params(d)\nk1 = k[1]\nk2 = k[2]\n\n# Example of indexing by order -------\ny1 = TPS(d)             # Create blank TPS with zero for all coefficients\ny1[1,0,0,0] = 1         # Set first-order part for first variable equal to 1\ny1 == x1                # Is true\n\nz2 = TPS(d)             # Create blank TPS with zero for all coefficients\nz2[0,0,0,1] = 1         # Set first-order part for second parameter equal to 1\nz2 == k2                # Is true\n\n# Example of indexing by var => order, param => order -------\ny1 = TPS(d)             # Create blank TPS with zero for all coefficients\ny1[1=>1] = 1            # Set first-order part for first variable equal to 1\ny1 == x1                # Is true\n\nz2 = TPS(d)             # Create blank TPS with zero for all coefficients\nz2[params=(2=>1,)] = 1  # Set first-order part for second parameter equal to 1\nz2 == k2                # Is true","category":"page"},{"location":"usage/#Promotion-of-TPS-to-ComplexTPS","page":"Usage","title":"Promotion of TPS to ComplexTPS","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"TPSs and ComplexTPSs can be mixed freely without concern. Any time an operation with a TPS and a ComplexTPS or a Complex number occurs, the result will be a ComplexTPS. A ComplexTPS can be converted back to a TPS using the real and imag operators.","category":"page"},{"location":"devel/#For-Developers","page":"For Developers","title":"For Developers","text":"","category":"section"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"The package consists of two layers: a low-level layer written in Julia that is 1-to-1 with the GTPSA C code, and a high-level, user-friendly layer that cleans up the notation for manipulating TPSAs, manages temporaries generated during evaluation, and properly manages the memory in C when variables go out of scope in Julia. The low-level functions, which are exported for developer usage at the moment, are listed below.","category":"page"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"The C code consists of three C structs: desc, tpsa, and ctpsa. The low-level Julia-equivalent, 1-to-1 structs are respectively Desc, RTPSA, and CTPSA. C pointers Ptr to these structs are wrapped by the high-level structs Descriptor, TPSA, and ComplexTPSA respectively.","category":"page"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"The low-level structs Desc, RTPSA, and CTPSA contain fields with Ptr{Cvoid}; these are pointers to any of the other structs, specified in the documentation. For example, the d field in RTPSA is a Ptr{Desc}. We could not explicitly define Ptr{Desc}, because Desc likewise has a Ptr{RTPSA}, and Julia does not allow for cyclic implicit struct definitions. Therefore, the Ptr must be converted to the appropriate low-level Julia struct before safe accessing (documented next to each of the fields).","category":"page"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"For example, to access the t array of RTPSAs in Desc defined by a high-level struct Descriptor:","category":"page"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"using GTPSA\n\nd = Descriptor(5,8)\n\n# To access the low-level C struct:\ndesc = unsafe_load(d.desc)\n\n# To access the array of 8 temporaries t:\nt_jl = unsafe_wrap(Vector{Ptr{RTPSA}}, Base.unsafe_convert(Ptr{Ptr{RTPSA}}, desc.t), 8)","category":"page"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"First the Ptr{Ptr{Cvoid}} is converted to a Ptr{Ptr{RTPSA}}, which can then be wrapped in a Vector{Ptr{RTPSA}}.","category":"page"},{"location":"devel/#Monomial","page":"For Developers","title":"Monomial","text":"","category":"section"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"mad_mono_str!\nmad_mono_prt!\nmad_mono_fill!\nmad_mono_copy!\nmad_mono_min\nmad_mono_max\nmad_mono_ord\nmad_mono_ordp\nmad_mono_ordpf\nmad_mono_eq\nmad_mono_lt\nmad_mono_le\nmad_mono_cmp\nmad_mono_rcmp\nmad_mono_add!\nmad_mono_sub!\nmad_mono_cat!\nmad_mono_rev!\nmad_mono_print","category":"page"},{"location":"devel/#GTPSA.mad_mono_str!","page":"For Developers","title":"GTPSA.mad_mono_str!","text":"mad_mono_str!(n::Cint, a::Ptr{Cuchar}, s::Cstring)::Cint\n\nWrites the monomial defined in the string s, which stores the orders in a human-readable format  (e.g. 10 is 10, not 0xa), into the byte array a with the orders specified in hexadecimal.\n\nInput\n\nn – Monomial and string length\ns – Monomial as string \"[0-9]*\"\n\nOutput\n\na – Monomial as a byte array converted from the input string\ni – Adjusted size n of byte array if '\u0000' found\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_prt!","page":"For Developers","title":"GTPSA.mad_mono_prt!","text":"mad_mono_prt(n::Cint, a::Ptr{Cuchar}, s::Ptr{Cuchar})::Cstring\n\nWrites the monomial defined by the byte array a (with orders stored as hexadecimal) into  a string s.\n\nInput\n\nn – Monomial and string length\na – Monomial as byte array\n\nOutput\n\ns – Monomial as string\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_fill!","page":"For Developers","title":"GTPSA.mad_mono_fill!","text":"mad_mono_fill!(n::Cint, a::Ptr{Cuchar}, v::Cuchar)\n\nFills the monomial a with the value v.\n\nInput\n\nn – Monomial length\na – Monomial\nv – Value\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_copy!","page":"For Developers","title":"GTPSA.mad_mono_copy!","text":"mad_mono_copy!(n::Cint, a::Ptr{Cuchar}, r::Ptr{Cuchar})\n\nCopies monomial a to monomial r.  \n\nInput\n\nn – Length of monomials\na – Source monomial\nr – Destination monomial\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_min","page":"For Developers","title":"GTPSA.mad_mono_min","text":"mad_mono_min(n::Cint, a::Ptr{Cuchar})::Cuchar\n\nReturns the minimum order of the monomial.\n\nInput\n\nn  – Length of monomial\na  – Monomial\n\nOutput\n\nmo – Mininum order of monomial a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_max","page":"For Developers","title":"GTPSA.mad_mono_max","text":"mad_mono_max(n::Cint, a::Ptr{Cuchar})::Cuchar\n\nReturns the maximum order of the monomial.\n\nInput\n\nn  – Length of monomial\na  – Monomial\n\nOutput\n\nmo – Maximum order of monomial a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_ord","page":"For Developers","title":"GTPSA.mad_mono_ord","text":"mad_mono_ord(n::Cint, a::Ptr{Cuchar})::Cint\n\nReturns the sum of the orders of the monomial a.\n\nInput\n\nn – Monomial length\na – Monomial\n\nOutput\n\ns – Sum of orders of monomial\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_ordp","page":"For Developers","title":"GTPSA.mad_mono_ordp","text":"mad_mono_ordp(n::Cint, a::Ptr{Cuchar}, stp::Cint)::Cdouble\n\nReturns the product of each stp-th order in monomial a. For example, stp = 2 collects every order in the monomial with a step of 2 between each. As a is a pointer, the product can be started at any  element in the monomial.\n\nInput\n\nn   – Monomial length\na   – Monomial as byte array\nstp – Step over which orders to include in the product\n\nOutput\n\np   – Product of orders of monomial separated by stp.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_ordpf","page":"For Developers","title":"GTPSA.mad_mono_ordpf","text":"mad_mono_ordpf(n::Cint, a::Ptr{Cuchar}, stp::Cint)::Cdouble\n\nReturns the product of factorials each stp-th order in monomial a. For example, stp = 2 collects  every order in the monomial with a step of 2 between each. As a is a pointer, the product can be started  at any element in the monomial.\n\nInput\n\nn   – Monomial length\na   – Monomial as byte array\nstp – Step over which orders to include in the product of factorials\n\nOutput\n\np   – Product of factorials of orders of monomial separated by stp\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_eq","page":"For Developers","title":"GTPSA.mad_mono_eq","text":"mad_mono_eq(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar})::Cuchar\n\nChecks if the monomial a is equal to the monomial b.\n\nInput\n\nn   – Length of monomials\na   – Monomial a\nb   – Monomial b\n\nOutput\n\nret – True if the monomials are equal, false if otherwise\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_lt","page":"For Developers","title":"GTPSA.mad_mono_lt","text":"mad_mono_lt(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar})::Cuchar\n\nChecks if monomial a is less than monomial b.\n\nInput\n\nn  – Length of monomials\na  – Monomial a\nb  – Monomial b\n\nOutput\n\nret – True if a < b, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_le","page":"For Developers","title":"GTPSA.mad_mono_le","text":"mad_mono_le(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar})::Cuchar\n\nChecks if monomial a is less than or equal to monomial b.\n\nInput\n\nn   – Length of monomials\na   – Monomial a\nb   – Monomial b\n\nOutput\n\nret – True if a <= mono_b, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_cmp","page":"For Developers","title":"GTPSA.mad_mono_cmp","text":"mad_mono_cmp(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar})::Cint\n\nCompares monomial a to monomial b, and returns the first difference in the lowest order variables.\n\nInput\n\nn   – Length of monomials\na   – Monomial a\nb   – Monomial b\n\nOutput\n\nret – First a[i]-b[i] != 0\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_rcmp","page":"For Developers","title":"GTPSA.mad_mono_rcmp","text":"mad_mono_rcmp(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar})::Cint\n\nCompares monomial a to monomial b starting from the right (when the monomials are ordered by variable,  which is almost never the case) and returns the first difference in the lowest order variables. \n\nInput\n\nn   – Length of monomials\na   – Monomial a\nb   – Monomial b\n\nOutput\n\nret – First a[i]-b[i] != 0 where i starts from the end.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_add!","page":"For Developers","title":"GTPSA.mad_mono_add!","text":"mad_mono_add!(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar}, r::Ptr{Cuchar})\n\nSets monomial r = a + b.\n\nInput\n\nn – Length of monomials\na – Source monomial a\nb – Source monomial b\n\nOutput\n\nr – Destination monomial, r = a + b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_sub!","page":"For Developers","title":"GTPSA.mad_mono_sub!","text":"mad_mono_sub!(n::Cint, a::Ptr{Cuchar}, b::Ptr{Cuchar}, r::Ptr{Cuchar})\n\nSets monomial r = a - b.\n\nInput\n\nn – Length of monomials\na – Source monomial a\nb – Source monomial b\n\nOutput\n\nr – Destination monomial, r = a - b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_cat!","page":"For Developers","title":"GTPSA.mad_mono_cat!","text":"mad_mono_cat!(n::Cint, a::Ptr{Cuchar}, m::Cint, b::Ptr{Cuchar}, r::Ptr{Cuchar})\n\nSets monomial r equal to the concatenation of the monomials a and b\n\nInput\n\nn – Length of monomonial a\na – Source monomial a\nm – Length of monomial b\nb – Source monomial b\n\nOutput\n\nr – Destination monomial of concatenation of a and b (length n+m)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_rev!","page":"For Developers","title":"GTPSA.mad_mono_rev!","text":"mad_mono_rev!(n::Cint, a::Ptr{Cuchar}, r::Ptr{Cuchar})\n\nSets destination monomial r equal to the reverse of source monomial a.\n\nInput\n\nn – Lengths of monomials\na – Source monomial a\n\nOutput\n\nr – Destination monomial of reverse monomial a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_mono_print","page":"For Developers","title":"GTPSA.mad_mono_print","text":"mad_mono_print(n::Cint, a::Ptr{Cuchar}, fp_::Ptr{Cvoid})\n\nPrints the monomial to stdout.\n\nInput\n\nn  – Length of monomial\na  – Source monomial to print to stdout\nfp_ – C FILE pointer, if null will print to stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#Desc","page":"For Developers","title":"Desc","text":"","category":"section"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"Desc\nmad_desc_newv\nmad_desc_newvp\nmad_desc_newvpo\nmad_desc_del!\nmad_desc_getnv!\nmad_desc_maxord\nmad_desc_maxlen\nmad_desc_gtrunc!\nmad_desc_isvalids\nmad_desc_isvalidm\nmad_desc_isvalidsm\nmad_desc_idxs\nmad_desc_idxm\nmad_desc_idxsm\nmad_desc_nxtbyvar\nmad_desc_nxtbyord\nmad_desc_mono!\nmad_desc_info","category":"page"},{"location":"devel/#GTPSA.Desc","page":"For Developers","title":"GTPSA.Desc","text":"`Desc`\n\nThis is a 1-to-1 struct for the C definition desc (descriptor) in GTPSA. Descriptors include all  information about the TPSA, including the number of variables/parameters and their orders, lookup tables for  the monomials, monomial indexing function, and pre-allocated permanent temporaries for fast evaluation.\n\nFields\n\nid::Cint                   – Index in list of registered descriptors\nnn::Cint                   – Number of variables + number of parameters, nn = nv+np <= 100000\nnv::Cint                   – Number of variables\nnp::Cint                   – Number of parameters\nmo::Cuchar                 – Max order of variables\npo::Cuchar                 – Max order of parameterss\nto::Cuchar                 – Global order of truncation. Note: ord_t in gtpsa is typedef for unsigned char (Cuchar)\nno::Ptr{Cuchar}            – Array of orders of each variable (first nv entries) and parameters (last np entries), length nn. Note: In C this is const\nuno::Cint                  – User provided array of orders of each variable/parameter (with mad_desc_newvpo)\nnth::Cint                  – Max number of threads or 1\nnc::Cuint                  – Number of coefficients (max length of TPSA)\nmonos::Ptr{Cuchar}         – 'Matrix' storing the monomials (sorted by variable)\nords::Ptr{Cuchar}          – Order of each monomial of To\nprms::Ptr{Cuchar}          – Order of parameters in each monomial of To (zero = no parameters)\nTo::Ptr{Ptr{Cuchar}}       – Table by orders - pointers to monomials, sorted by order\nTv::Ptr{Ptr{Cuchar}}       – Table by vars - pointers to monomials, sorted by variable\nocs::Ptr{Ptr{Cuchar}}      – ocs[t,i] -> o in mul, compute o on thread t 3 <= o <= mo aterminated with 0\nord2idx::Ptr{Cint}         – Order to polynomial start index in To (i.e. in TPSA coef)\ntv2to::Ptr{Cint}           – Lookup tv->to\nto2tv::Ptr{Cint}           – Lookup to->tv\nH::Ptr{Cint}               – Indexing matrix in Tv\nL::Ptr{Ptr{Cint}}          – Multiplication indexes L[oa,ob]->L_ord L_ord[ia,ib]->ic\nL_idx::Ptr{Ptr{Ptr{Cint}}} – L_idx[oa,ob]->[start] [split] [end] idxs in L\nsize::Culonglong           – Bytes used by desc. Unsigned Long Int: In 32 bit system is Int32 but 64 bit is Int64. Using Culonglong assuming 64 bit\nt::Ptr{Ptr{Cvoid}}         – Temporary array contains 8 pointers to RTPSAs already initialized\nct::Ptr{Ptr{Cvoid}}        – Temporary array contains 8 pointers to CTPSAs already initialized\nti::Ptr{Cint}              – idx of tmp used\ncti::Ptr{Cint}             – idx of tmp used                                                                                                      \n\n\n\n\n\n","category":"type"},{"location":"devel/#GTPSA.mad_desc_newv","page":"For Developers","title":"GTPSA.mad_desc_newv","text":"mad_desc_newv(nv::Cint, mo::Cuchar)::Ptr{Desc}\n\nCreates a TPSA descriptor with the specified number of variables and maximum order.  The number of parameters is set to 0.\n\nInput\n\nnv  – Number of variables in the TPSA\nmo  – Maximum order of TPSA, mo = max(1, mo)\n\nOutput\n\nret – Descriptor with the specified number of variables and maximum order\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_newvp","page":"For Developers","title":"GTPSA.mad_desc_newvp","text":"mad_desc_newvp(nv::Cint, mo::Cuchar, np_::Cint, po_::Cuchar)::Ptr{Desc}\n\nCreates a TPSA descriptor with the specifed number of variables, maximum order, number of  parameters, and parameter order.\n\nInput\n\nnv  – Number of variables\nmo  – Maximum order of TPSA, mo = max(1, mo)\nnp_ – (Optional) Number of parameters, default is 0\npo_ – (Optional) Order of parameters, po = max(1, po_)\n\nOutput\n\nret – Descriptor with the specified nv, mo, np, and po\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_newvpo","page":"For Developers","title":"GTPSA.mad_desc_newvpo","text":"mad_desc_newvpo(nv::Cint, mo::Cuchar, np_::Cint, po_::Cuchar, no_::Ptr{Cuchar})::Ptr{Desc}\n\nCreates a TPSA descriptor with the specifed number of variables, maximum order, number of parameters,  parameter order, and individual variable/parameter orders specified in no. The first nv entries in no  correspond to the variables' orders and the next np entries correspond the parameters' orders.\n\nInput\n\nnv   – Number of variables\nmo   – Maximum order of TPSA (mo = max(mo , no[0 :nn-1]), nn = nv+np)\nnp_  – (Optional) Number of parameters, default is 0\npo_  – (Optional) Order of parameters (po = max(po_, no[nv:nn-1]), po <= mo)\nno_  – (Optional) Array of orders of variables and parameters\n\nOutput\n\nret – Descriptor with the specified nv, mo, np, po, no.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_del!","page":"For Developers","title":"GTPSA.mad_desc_del!","text":"mad_desc_del!(d_::Ptr{Desc})\n\nCalls the destructor for the passed descriptor.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_getnv!","page":"For Developers","title":"GTPSA.mad_desc_getnv!","text":"mad_desc_getnv!(d::Ptr{Desc}, mo_::Ptr{Cuchar}, np_::Ptr{Cint}, po_::Ptr{Cuchar)::Cint\n\nReturns the number of variables in the descriptor, and sets the passed mo_, np_, and po_ to the maximum  order, number of parameters, and parameter order respectively.\n\nInput\n\nd – Descriptor\n\nOutput\n\nmo_ – (Optional) Maximum order of the descriptor\nnp_ – (Optional) Number of parameters of the descriptor\npo_ – (Optional) Parameter order of the descriptor\nret – Number of variables in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_maxord","page":"For Developers","title":"GTPSA.mad_desc_maxord","text":"mad_desc_maxord(d::Ptr{Desc}, nn::Cint, no_::Ptr{Cuchar})::Cuchar\n\nSets the order of the variables and parameters of the TPSA to those specified in no_ and  returns the maximum order of the TPSA.\n\nInput\n\nd   – Descriptor\nnn  – Number of variables + number of parameters, no_[1..nn]\nno_ – (Optional) Orders of parameters to be filled if provided\n\nOutput\n\nret  – Maximum order of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_maxlen","page":"For Developers","title":"GTPSA.mad_desc_maxlen","text":"mad_desc_maxlen(d::Ptr{Desc}, mo::Cuchar)::Cint\n\nGets the maximum length of the TPSA given an order. \n\nInput\n\nd   – Descriptor\nmo  – Order (ordlen(maxord) == maxlen)\n\nOutput\n\nret – monomials in 0..order\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_gtrunc!","page":"For Developers","title":"GTPSA.mad_desc_gtrunc!","text":"mad_desc_gtrunc!(d::Ptr{Desc}, to::Cuchar)::Cuchar\n\nSets the global truncation order to of the TPSA, and returns the old global truncation order.\n\nInput\n\nd     – Descriptor\nto    – New global truncation order\n\nOutput\n\noldto – Old global truncation order\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_isvalids","page":"For Developers","title":"GTPSA.mad_desc_isvalids","text":"mad_desc_isvalids(d::Ptr{Desc}, n::Cint, s::Cstring)::Cuchar\n\nChecks if monomial as string s is valid given maximum order of descriptor.\n\nInput\n\nd  – Descriptor\nn  – Monomial string length\ns  – Monomial as string \"[0-9]*\"\n\nOutput\n\nret – True if valid, false if invalid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_isvalidm","page":"For Developers","title":"GTPSA.mad_desc_isvalidm","text":"mad_desc_isvalidm(d::Ptr{Desc}, n::Cint, m::Ptr{Cuchar})::Cuchar\n\nChecks if monomial as byte array m is valid given maximum order of descriptor.\n\nInput\n\nd  – Descriptor\nn  – Length of monomial\nm  – Monomial as byte array\n\nOutput\n\nret – True if valid, false if invalid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_isvalidsm","page":"For Developers","title":"GTPSA.mad_desc_isvalidsm","text":"mad_desc_isvalidsm(d::Ptr{Desc}, n::Cint, m::Ptr{Cint})::Cuchar\n\nChecks the monomial as sparse monomial m (monomial stored as sequence of integers with each pair  [(i,o)] such that i = index, o = order) is valid given the maximum order of the descriptor.\n\nInput\n\nd   – Descriptor\nn   – Length of monomial\nm   – Sparse monomial [(idx, ord)]\n\nOutput\n\nret – True if valid, false if invalid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_idxs","page":"For Developers","title":"GTPSA.mad_desc_idxs","text":"mad_desc_idxs(d::Ptr{Desc}, n::Cint, s::Cstring)::Cint\n\nReturns the index of the monomial as string s in the descriptor, or -1 if the monomial is invalid.\n\nInput\n\nd   – Descriptor\nn   – String length or 0 if unknown\ns   – Monomial as string \"[0-9]*\"\n\nOutput\n\nret – Monomial index or -1 if invalid monomial\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_idxm","page":"For Developers","title":"GTPSA.mad_desc_idxm","text":"mad_desc_idxm(d::Ptr{Desc}, n::Cint, m::Ptr{Cuchar})::Cint\n\nReturns the index of the monomial as byte array m in the descriptor, or -1 if the monomial is invalid.\n\nInput\n\nd – Descriptor\nn    – Monomial length\nm    – Monomial as byte array\n\nOutput\n\nret  – Monomial index or -1 if invalid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_idxsm","page":"For Developers","title":"GTPSA.mad_desc_idxsm","text":"mad_desc_idxsm(d::Ptr{Desc}, n::Cint, m::Ptr{Cint})::Cint\n\nReturns the index of the monomial as sparse monomial m, indexed as [(i,o)], in the descriptor, or -1 if the monomial is invalid.\n\nInput\n\nd   – Descriptor\nn   – Monomial length\nm   – Sparse monomial [(idx,ord)]\n\nOutput\n\nret – Monomial index or -1 if invalid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_nxtbyvar","page":"For Developers","title":"GTPSA.mad_desc_nxtbyvar","text":"mad_desc_nxtbyvar(d::Ptr{Desc}, n::Cint, m::Ptr{Cuchar})::Cint\n\nReturns the next monomial after monomial m in the TPSA when sorted by variable.\n\nInput\n\nd   – Descriptor\nn   – Monomial length\nm   – Monomial as byte array\n\nOutput\n\nidx – Monomial index or -1 if no valid next monomial\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_nxtbyord","page":"For Developers","title":"GTPSA.mad_desc_nxtbyord","text":"mad_desc_nxtbyord(d::Ptr{Desc}, n::Cint, m::Ptr{Cuchar})::Cint\n\nReturns the next monomial after monomial m in the TPSA when sorted by order.\n\nInput\n\nd   – Descriptor\nn   – Monomial length\nm   – Monomial as byte array\n\nOutput\n\nidx – Monomial index or -1 if no valid next monomial\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_mono!","page":"For Developers","title":"GTPSA.mad_desc_mono!","text":"mad_desc_mono!(d::Ptr{Desc}, i::Cint, n::Cint, m_::Ptr{Cuchar}, p_::Ptr{Cuchar})::Cuchar\n\nReturns the order of the monomial at index i, and if n and m_ are provided, then will also fill m_  with the monomial at this index. Also will optionally return the order of the parameters in the monomial  if p_ is provided\n\nInput\n\nd   – Descriptor\ni   – Slot index (must be valid)\nn   – Monomial length (must be provided if m_ is to be filled)\n\nOutput\n\nret – Monomial order at slot index\nm_  – (Optional) Monomial to fill if provided\np_  – (Optional) Order of parameters in monomial if provided\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_desc_info","page":"For Developers","title":"GTPSA.mad_desc_info","text":"mad_desc_info(d::Ptr{Desc}, fp::Ptr{Cvoid})\n\nFor debugging.\n\nInput\n\nd  – Descriptor to debug\nfp – File to write to. If null, will write to stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#RTPSA","page":"For Developers","title":"RTPSA","text":"","category":"section"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"RTPSA\nmad_tpsa_newd\nmad_tpsa_new\nmad_tpsa_del!\nmad_tpsa_desc\nmad_tpsa_uid!\nmad_tpsa_len\nmad_tpsa_nam\nmad_tpsa_ord\nmad_tpsa_ordv\nmad_tpsa_ordn\nmad_tpsa_copy!\nmad_tpsa_sclord!\nmad_tpsa_getord!\nmad_tpsa_cutord!\nmad_tpsa_maxord!\nmad_tpsa_convert!\nmad_tpsa_setvar!\nmad_tpsa_setval!\nmad_tpsa_setnam!\nmad_tpsa_clear!\nmad_tpsa_isnul\nmad_tpsa_mono!\nmad_tpsa_idxs\nmad_tpsa_idxm\nmad_tpsa_idxsm\nmad_tpsa_cycle!\nmad_tpsa_get0\nmad_tpsa_geti\nmad_tpsa_gets\nmad_tpsa_getm\nmad_tpsa_getsm\nmad_tpsa_set0!\nmad_tpsa_seti!\nmad_tpsa_sets!\nmad_tpsa_setm!\nmad_tpsa_setsm!\nmad_tpsa_getv!\nmad_tpsa_setv!\nmad_tpsa_equ\nmad_tpsa_dif!\nmad_tpsa_add!\nmad_tpsa_sub!\nmad_tpsa_mul!\nmad_tpsa_div!\nmad_tpsa_pow!\nmad_tpsa_powi!\nmad_tpsa_pown!\nmad_tpsa_nrm\nmad_tpsa_abs!\nmad_tpsa_sqrt!\nmad_tpsa_exp!\nmad_tpsa_log!\nmad_tpsa_sincos!\nmad_tpsa_sin!\nmad_tpsa_cos!\nmad_tpsa_tan!\nmad_tpsa_cot!\nmad_tpsa_sinc!\nmad_tpsa_sincosh!\nmad_tpsa_sinh!\nmad_tpsa_cosh!\nmad_tpsa_tanh!\nmad_tpsa_coth!\nmad_tpsa_sinhc!\nmad_tpsa_asin!\nmad_tpsa_acos!\nmad_tpsa_atan!\nmad_tpsa_acot!\nmad_tpsa_asinc!\nmad_tpsa_asinh!\nmad_tpsa_acosh!\nmad_tpsa_atanh!\nmad_tpsa_acoth!\nmad_tpsa_asinhc!\nmad_tpsa_erf!\nmad_tpsa_erfc!\nmad_tpsa_acc!\nmad_tpsa_scl!\nmad_tpsa_inv!\nmad_tpsa_invsqrt!\nmad_tpsa_unit!\nmad_tpsa_atan2!\nmad_tpsa_hypot!\nmad_tpsa_hypot3!\nmad_tpsa_integ!\nmad_tpsa_deriv!\nmad_tpsa_derivm!\nmad_tpsa_poisbra!\nmad_tpsa_taylor!\nmad_tpsa_axpb!\nmad_tpsa_axpbypc!\nmad_tpsa_axypb!\nmad_tpsa_axypbzpc!\nmad_tpsa_axypbvwpc!\nmad_tpsa_ax2pby2pcz2!\nmad_tpsa_axpsqrtbpcx2!\nmad_tpsa_logaxpsqrtbpcx2!\nmad_tpsa_logxdy!\nmad_tpsa_vec2fld!\nmad_tpsa_fld2vec!\nmad_tpsa_fgrad!\nmad_tpsa_liebra!\nmad_tpsa_exppb!\nmad_tpsa_logpb!\nmad_tpsa_mnrm\nmad_tpsa_minv!\nmad_tpsa_pminv!\nmad_tpsa_compose!\nmad_tpsa_translate!\nmad_tpsa_eval!\nmad_tpsa_mconv!\nmad_tpsa_print\nmad_tpsa_scan\nmad_tpsa_scan_hdr\nmad_tpsa_scan_coef!\nmad_tpsa_debug\nmad_tpsa_isvalid\nmad_tpsa_init!","category":"page"},{"location":"devel/#GTPSA.RTPSA","page":"For Developers","title":"GTPSA.RTPSA","text":"`RTPSA`\n\nThis is a 1-to-1 struct for the C definition tpsa (real TPSA) in GTPSA.\n\nFields\n\nd::Ptr{Cvoid}             – Ptr to tpsa descriptor\nuid::Cint                 – Special user field for external use (and padding)\nmo::Cuchar                – max ord (allocated)\nlo::Cuchar                – lowest used ord\nhi::Cuchar                – highest used ord\nnz::Culonglong            – zero/nonzero homogenous polynomials. Note: Int64 if 64 bit compiled C code, else 32 bit\nnam::NTuple{NAMSZ,Cuchar} – tpsa name max string length 16 NAMSZ\ncoef::Ptr{Cdouble}        – warning: must be identical to ctpsa up to coef excluded                                                                                                  \n\n\n\n\n\n","category":"type"},{"location":"devel/#GTPSA.mad_tpsa_newd","page":"For Developers","title":"GTPSA.mad_tpsa_newd","text":"mad_tpsa_newd(d::Ptr{Desc}, mo::Cuchar)::Ptr{RTPSA}\n\nCreates a TPSA defined by the specified descriptor and maximum order. If MAD_TPSA_DEFAULT  is passed for mo, the mo defined in the descriptor is used. If mo > d_mo, then mo = d_mo.\n\nInput\n\nd  – Descriptor\nmo – Maximum order\n\nOutput\n\nt  – New TPSA defined by the descriptor\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_new","page":"For Developers","title":"GTPSA.mad_tpsa_new","text":"mad_tpsa_new(t::Ptr{RTPSA}, mo::Cuchar)::Ptr{RTPSA}\n\nCreates a blank TPSA with same number of variables/parameters of the inputted TPSA,  with maximum order specified by mo. If MAD_TPSA_SAME is passed for mo, the mo  currently in t is used for the created TPSA. Ok with t=(tpsa_t*)ctpsa\n\nInput\n\nt   – TPSA\nmo  – Maximum order of new TPSA\n\nOutput\n\nret – New blank TPSA with maximum order mo\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_del!","page":"For Developers","title":"GTPSA.mad_tpsa_del!","text":"mad_tpsa_del!(t::Ptr{RTPSA})\n\nCalls the destructor for the TPSA.\n\nInput\n\nt – TPSA to destruct\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_desc","page":"For Developers","title":"GTPSA.mad_tpsa_desc","text":"mad_tpsa_desc(t::Ptr{RTPSA})::Ptr{Desc}\n\nGets the descriptor for the TPSA.\n\nInput\n\nt   – TPSA\n\nOutput\n\nret – Descriptor for the RTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_uid!","page":"For Developers","title":"GTPSA.mad_tpsa_uid!","text":"mad_tpsa_uid!(t::Ptr{RTPSA}, uid_::Cint)::Cint\n\nSets the TPSA uid if uid_ != 0, and returns the current (previous if set) TPSA uid. \n\nInput\n\nt    – TPSA\nuid_ – uid to set in the TPSA if uid_ != 0\n\nOutput\n\nret  – Current (previous if set) TPSA uid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_len","page":"For Developers","title":"GTPSA.mad_tpsa_len","text":"mad_tpsa_len(t::Ptr{RTPSA})::Cint\n\nGets the length of the TPSA itself (e.g. the descriptor may be order 10 but TPSA may only be order 2)\n\nInput\n\nt   – TPSA\n\nOutput\n\nret – Length of RTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_nam","page":"For Developers","title":"GTPSA.mad_tpsa_nam","text":"mad_tpsa_nam(t::Ptr{RTPSA})::Cstring\n\nGet the name of the TPSA.\n\nInput\n\nt    – TPSA\n\nOutput\n\nret  – Name of RTPSA (null terminated in C)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_ord","page":"For Developers","title":"GTPSA.mad_tpsa_ord","text":"mad_tpsa_ord(t::Ptr{RTPSA})::Cuchar\n\nGets the TPSA order.\n\nInput\n\nt   – TPSA\n\nOutput\n\nret – Order of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_ordv","page":"For Developers","title":"GTPSA.mad_tpsa_ordv","text":"mad_tpsa_ordv(t::Ptr{RTPSA}, ts::Ptr{RTPSA}...)::Cuchar\n\nReturns maximum order of all TPSAs provided.\n\nInput\n\nt  – TPSA\nts – Variable number of TPSAs passed as parameters\n\nOutput\n\nmo – Maximum order of all TPSAs provided\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_ordn","page":"For Developers","title":"GTPSA.mad_tpsa_ordn","text":"mad_tpsa_ordn(n::Cint, t::Ptr{Ptr{RTPSA}})::Cuchar\n\nReturns the max order of all TPSAs in t.\n\nInput\n\nn  – Number of TPSAs\nt  – Array of TPSAs \n\nOutput\n\nmo – Maximum order of all TPSAs\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_copy!","page":"For Developers","title":"GTPSA.mad_tpsa_copy!","text":"mad_tpsa_copy!(t::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nMakes a copy of the TPSA t to r.\n\nInput\n\nt – Source TPSA\n\nOutput\n\nr – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sclord!","page":"For Developers","title":"GTPSA.mad_tpsa_sclord!","text":"mad_tpsa_sclord!(t::Ptr{RTPSA}, r::Ptr{RTPSA}, inv::Cuchar, prm::Cuchar)\n\nScales all coefficients by order. If inv == 0, scales coefficients by order (derivation), else  scales coefficients by 1/order (integration).\n\nInput\n\nt   – Source TPSA\ninv – Put order up, divide, scale by inv of value of order\nprm – Parameters flag. If set to 0x0, the scaling excludes the order of the parameters in the monomials. Else, scaling is with total order of monomial\n\nOutput\n\nr   – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_getord!","page":"For Developers","title":"GTPSA.mad_tpsa_getord!","text":"mad_tpsa_getord!(t::Ptr{RTPSA}, r::Ptr{RTPSA}, ord::Cuchar)\n\nExtract one homogeneous polynomial of the given order\n\nInput\n\nt  – Source TPSA\nord – Order to retrieve\n\nOutput\n\nr   – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_cutord!","page":"For Developers","title":"GTPSA.mad_tpsa_cutord!","text":"mad_tpsa_cutord!(t::Ptr{RTPSA}, r::Ptr{RTPSA}, ord::Cint)\n\nCuts the TPSA off at the given order and above, or if ord is negative, will cut orders below  abs(ord) (e.g. if ord = -3, then orders 0-3 are cut off).\n\nInput\n\nt   – Source TPSA\nord – Cut order: 0..-ord or ord..mo\n\nOutput\n\nr   – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_maxord!","page":"For Developers","title":"GTPSA.mad_tpsa_maxord!","text":"mad_tpsa_maxord!(t::Ptr{RTPSA}, n::Cint, idx_::Ptr{Cint})::Cint\n\nReturns the index to the monomial with maximum abs(coefficient) in the TPSA for all orders 0 to n. Ifidx_is provided, it is filled with the indices for the maximum abs(coefficient) monomial for each order up ton`. \n\nInput\n\nt    – TPSA\nn    – Highest order to include in finding the maximum abs(coefficient) in the TPSA, length of idx_ if provided\n\nOutput\n\nidx_ – (Optional) If provided, is filled with indices to the monomial for each order up to n with maximum abs(coefficient)\nmi   – Index to the monomial in the TPSA with maximum abs(coefficient)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_convert!","page":"For Developers","title":"GTPSA.mad_tpsa_convert!","text":"mad_tpsa_convert!(t::Ptr{RTPSA}, r::Ptr{RTPSA}, n::Cint, t2r_::Ptr{Cint}, pb::Cint)\n\nGeneral function to convert TPSAs to different orders and reshuffle canonical coordinates. The destination TPSA will  be of order n, and optionally have the variable reshuffling defined by t2r_ and poisson bracket sign. e.g. if  t2r_ = {1,2,3,4,6,5} and pb = -1, canonical coordinates 6 and 5 are swapped and the new 5th canonical coordinate  will be negated. Useful for comparing with different differential algebra packages.\n\nInput\n\nt    – Source TPSA\nn    – Length of vector\nt2r_ – (Optional) Vector of index lookup\npb   – Poisson bracket, 0, 1:fwd, -1:bwd\n\nOutput\n\nr    – Destination TPSA with specified order and canonical coordinate reshuffling.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setvar!","page":"For Developers","title":"GTPSA.mad_tpsa_setvar!","text":"mad_tpsa_setvar!(t::Ptr{RTPSA}, v::Cdouble, iv_::Cint, scl_::Cdouble)\n\nSets the 0th and 1st order values for the variables, and sets the rest of the variables to 0\n\nInput\n\nt    – TPSA\nv    – 0th order value (coefficient)\niv_  – Variable index, optional if order of TPSA is 0 (behaves like mad_tpsa_setval then)\nscl_ – 1st order variable value (typically will be 1)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setval!","page":"For Developers","title":"GTPSA.mad_tpsa_setval!","text":"mad_tpsa_setval!(t::Ptr{RTPSA}, v::Cdouble)\n\nSets the scalar part of the TPSA to v and all other values to 0 (sets the TPSA order to 0).\n\nInput\n\nt – TPSA to set to scalar\nv – Scalar value to set TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setnam!","page":"For Developers","title":"GTPSA.mad_tpsa_setnam!","text":"mad_tpsa_setnam!(t::Ptr{RTPSA}, nam::Cstring)\n\nSets the name of the RTPSA.\n\nInput\n\nt   – TPSA\nnam – Name to set for RTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_clear!","page":"For Developers","title":"GTPSA.mad_tpsa_clear!","text":"mad_tpsa_clear!(t::Ptr{RTPSA})\n\nClears the TPSA (reset to 0)\n\nInput\n\nt – TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_isnul","page":"For Developers","title":"GTPSA.mad_tpsa_isnul","text":"mad_tpsa_isnul(t::Ptr{RTPSA})::Cuchar\n\nChecks if TPSA is 0 or not\n\nInput\n\nt    – TPSA to check\n\nOutput\n\nret  – True or false\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_mono!","page":"For Developers","title":"GTPSA.mad_tpsa_mono!","text":"mad_tpsa_mono!(t::Ptr{RTPSA}, i::Cint, n::Cint, m_::Ptr{Cuchar}, p_::Ptr{Cuchar})::Cuchar\n\nReturns the order of the monomial at index i in the TPSA and optionally the monomial at that index is returned in m_  and the order of parameters in the monomial in p_\n\nInput\n\nt   – TPSA\ni   – Index valid in TPSA\nn   – Length of monomial\n\nOutput\n\nm_  – (Optional) Monomial at index i in TPSA\np_  – (Optional) Order of parameters in monomial\nret – Order of monomial in TPSA at index i\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_idxs","page":"For Developers","title":"GTPSA.mad_tpsa_idxs","text":"mad_tpsa_idxs(t::Ptr{RTPSA}, n::Cint, s::Cstring)::Cint\n\nReturns index of monomial in the TPSA given the monomial as string. This generally should not be used, as there  are no assumptions about which monomial is attached to which index.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as string\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_idxm","page":"For Developers","title":"GTPSA.mad_tpsa_idxm","text":"mad_tpsa_idxm(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cuchar})::Cint\n\nReturns index of monomial in the TPSA given the monomial as a byte array\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as byte array\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_idxsm","page":"For Developers","title":"GTPSA.mad_tpsa_idxsm","text":"mad_tpsa_idxsm(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cint})::Cint\n\nReturns index of monomial in the TPSA given the monomial as a sparse monomial. This generally should not be used, as there  are no assumptions about which monomial is attached to which index.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as sparse monomial\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_cycle!","page":"For Developers","title":"GTPSA.mad_tpsa_cycle!","text":"mad_tpsa_cycle!(t::Ptr{RTPSA}, i::Cint, n::Cint, m_::Ptr{Cuchar}, v_::Ptr{Cdouble})::Cint\n\nUsed for scanning through each nonzero monomial in the TPSA. Given a starting index (-1 if starting at 0), will  optionally fill monomial m_ with the monomial at index i and the value at v_ with the monomials coefficient, and  return the next NONZERO monomial index in the TPSA. This is useful for building an iterator through the TPSA.\n\nInput\n\nt  – TPSA to scan\ni  – Index to start from (-1 to start at 0)\nn  – Length of monomial\nm_ – (Optional) Monomial to be filled if provided\nv_ – (Optional) Pointer to value of coefficient\n\nOutput\n\ni  – Index of next nonzero monomial in the TPSA, or -1 if reached the end\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_get0","page":"For Developers","title":"GTPSA.mad_tpsa_get0","text":"mad_tpsa_get0(t::Ptr{RTPSA})::Cdouble\n\nGets the 0th order (scalar) value of the TPSA\n\nInput\n\nt   – TPSA\n\nOutput\n\nret – Scalar value of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_geti","page":"For Developers","title":"GTPSA.mad_tpsa_geti","text":"mad_tpsa_geti(t::Ptr{RTPSA}, i::Cint)::Cdouble\n\nGets the coefficient of the monomial at index i. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\ni   – Monomial index\n\nOutput\n\nret – Coefficient of monomial at index i\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_gets","page":"For Developers","title":"GTPSA.mad_tpsa_gets","text":"mad_tpsa_gets(t::Ptr{RTPSA}, n::Cint, s::Cstring)::Cdouble\n\nGets the coefficient of the monomial s defined as a string. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as string\n\nOutput\n\nret – Coefficient of monomial s in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_getm","page":"For Developers","title":"GTPSA.mad_tpsa_getm","text":"mad_tpsa_getm(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cuchar})::Cdouble\n\nGets the coefficient of the monomial m defined as a byte array. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\nm   – Monomial as byte array\n\nOutput\n\nret – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_getsm","page":"For Developers","title":"GTPSA.mad_tpsa_getsm","text":"mad_tpsa_getsm(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cint})::Cdouble\n\nGets the coefficient of the monomial m defined as a sparse monomial. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\nm   – Monomial as sparse monomial\n\nOutput\n\nret – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_set0!","page":"For Developers","title":"GTPSA.mad_tpsa_set0!","text":"mad_tpsa_set0!(t::Ptr{RTPSA}, a::Cdouble, b::Cdouble)\n\nSets the 0th order coefficient (scalar part of TPSA) according to coef[0] = a*coef[0] + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\na – Scaling of current 0th order value\nb – Constant added to current 0th order value\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_seti!","page":"For Developers","title":"GTPSA.mad_tpsa_seti!","text":"mad_tpsa_seti!(t::Ptr{RTPSA}, i::Cint, a::Cdouble, b::Cdouble)\n\nSets the coefficient of monomial at index i to coef[i] = a*coef[i] + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\ni – Index of monomial\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sets!","page":"For Developers","title":"GTPSA.mad_tpsa_sets!","text":"mad_tpsa_sets!(t::Ptr{RTPSA}, n::Cint, s::Cstring, a::Cdouble, b::Cdouble)\n\nSets the coefficient of monomial defined by string s to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\ns – Monomial as string\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setm!","page":"For Developers","title":"GTPSA.mad_tpsa_setm!","text":"mad_tpsa_setm!(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cuchar}, a::Cdouble, b::Cdouble)\n\nSets the coefficient of monomial defined by byte array m to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as byte array\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setsm!","page":"For Developers","title":"GTPSA.mad_tpsa_setsm!","text":"mad_tpsa_setsm!(t::Ptr{RTPSA}, n::Cint, m::Ptr{Cint}, a::Cdouble, b::Cdouble)\n\nSets the coefficient of monomial defined by sparse monomial m to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as sparse monomial\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_getv!","page":"For Developers","title":"GTPSA.mad_tpsa_getv!","text":"mad_tpsa_getv!(t::Ptr{RTPSA}, i::Cint, n::Cint, v::Ptr{Cdouble})\n\nVectorized getter of the coefficients for monomials with indices i..i+n. Useful for extracting the 1st order parts of  a TPSA to construct a matrix (i = 1, n = nv+np = nn). \n\nInput\n\nt – TPSA\ni – Starting index of monomials to get coefficients\nn – Number of monomials to get coefficients of starting at i\n\nOutput\n\nv – Array of coefficients for monomials i..i+n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_setv!","page":"For Developers","title":"GTPSA.mad_tpsa_setv!","text":"mad_tpsa_setv!(t::Ptr{RTPSA}, i::Cint, n::Cint, v::Ptr{Cdouble})\n\nVectorized setter of the coefficients for monomials with indices i..i+n. Useful for putting a matrix into a map.\n\nInput\n\nt – TPSA\ni – Starting index of monomials to set coefficients\nn – Number of monomials to set coefficients of starting at i\nv – Array of coefficients for monomials i..i+n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_equ","page":"For Developers","title":"GTPSA.mad_tpsa_equ","text":"mad_tpsa_equ(a::Ptr{RTPSA}, b::Ptr{RTPSA}, tol_::Cdouble)::Cuchar\n\nChecks if the TPSAs a and b are equal within the specified tolerance tol_. If tol_ is not specified, DBL_EPSILON is used.\n\nInput\n\na    – TPSA a\nb    – TPSA b\ntol_ – (Optional) Difference below which the TPSAs are considered equal\n\nOutput\n\nret   - True if a == b within tol_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_dif!","page":"For Developers","title":"GTPSA.mad_tpsa_dif!","text":"mad_tpsa_dif!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nFor each homogeneous polynomial in TPSAs a and b, calculates either the relative error or absolute error for each order. If the maximum coefficient for a given order in a is > 1, the relative error is computed for that order. Else, the absolute  error is computed. This is very useful for comparing maps between codes or doing unit tests. In Julia, essentially:\n\nc_i = (a_i.-b_i)/maximum([abs.(a_i)...,1]) where a_i and b_i are vectors of the monomials for an order i\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_add!","page":"For Developers","title":"GTPSA.mad_tpsa_add!","text":"mad_tpsa_add!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a + b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a + b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sub!","page":"For Developers","title":"GTPSA.mad_tpsa_sub!","text":"mad_tpsa_sub!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a - b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a - b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_mul!","page":"For Developers","title":"GTPSA.mad_tpsa_mul!","text":"mad_tpsa_mul!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a * b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a * b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_div!","page":"For Developers","title":"GTPSA.mad_tpsa_div!","text":"mad_tpsa_div!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a / b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a / b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_pow!","page":"For Developers","title":"GTPSA.mad_tpsa_pow!","text":"mad_tpsa_pow!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a ^ b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a ^ b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_powi!","page":"For Developers","title":"GTPSA.mad_tpsa_powi!","text":"mad_tpsa_powi!(a::Ptr{RTPSA}, n::Cint, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a ^ n where n is an integer.\n\nInput\n\na – Source TPSA a\nn – Integer power\n\nOutput\n\nc – Destination TPSA c = a ^ n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_pown!","page":"For Developers","title":"GTPSA.mad_tpsa_pown!","text":"mad_tpsa_pown!(a::Ptr{RTPSA}, v::Cdouble, c::Ptr{RTPSA})\n\nSets the destination TPSA c = a ^ v where v is of double precision.\n\nInput\n\na – Source TPSA a\nv – \"double\" precision power\n\nOutput\n\nc – Destination TPSA c = a ^ v\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_nrm","page":"For Developers","title":"GTPSA.mad_tpsa_nrm","text":"mad_tpsa_nrm(a::Ptr{RTPSA})::Cdouble\n\nCalculates the 1-norm of TPSA a.\n\nInput\n\na   – TPSA\n\nOutput\n\nnrm – 1-Norm of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_abs!","page":"For Developers","title":"GTPSA.mad_tpsa_abs!","text":"mad_tpsa_abs!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the absolute value of TPSA a. Specifically, the  result contains a TPSA with the abs of all coefficients.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = |a|\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sqrt!","page":"For Developers","title":"GTPSA.mad_tpsa_sqrt!","text":"mad_tpsa_sqrt!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the sqrt of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sqrt(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_exp!","page":"For Developers","title":"GTPSA.mad_tpsa_exp!","text":"mad_tpsa_exp!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the exponential of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = exp(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_log!","page":"For Developers","title":"GTPSA.mad_tpsa_log!","text":"mad_tpsa_log!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the log of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = log(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sincos!","page":"For Developers","title":"GTPSA.mad_tpsa_sincos!","text":"mad_tpsa_sincos!(a::Ptr{RTPSA}, s::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA s = sin(a) and TPSA c = cos(a)\n\nInput\n\na – Source TPSA a\n\nOutput\n\ns – Destination TPSA s = sin(a)\nc – Destination TPSA c = cos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sin!","page":"For Developers","title":"GTPSA.mad_tpsa_sin!","text":"mad_tpsa_sin!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the sin of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sin(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_cos!","page":"For Developers","title":"GTPSA.mad_tpsa_cos!","text":"mad_tpsa_cos!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the cos of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_tan!","page":"For Developers","title":"GTPSA.mad_tpsa_tan!","text":"mad_tpsa_tan!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the tan of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = tan(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_cot!","page":"For Developers","title":"GTPSA.mad_tpsa_cot!","text":"mad_tpsa_cot!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the cot of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cot(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sinc!","page":"For Developers","title":"GTPSA.mad_tpsa_sinc!","text":"mad_tpsa_sinc!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the sinc of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sincosh!","page":"For Developers","title":"GTPSA.mad_tpsa_sincosh!","text":"mad_tpsa_sincosh!(a::Ptr{RTPSA}, s::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA s = sinh(a) and TPSA c = cosh(a)\n\nInput\n\na – Source TPSA a\n\nOutput\n\ns – Destination TPSA s = sinh(a)\nc – Destination TPSA c = cosh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sinh!","page":"For Developers","title":"GTPSA.mad_tpsa_sinh!","text":"mad_tpsa_sinh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the sinh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_cosh!","page":"For Developers","title":"GTPSA.mad_tpsa_cosh!","text":"mad_tpsa_cosh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the cosh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cosh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_tanh!","page":"For Developers","title":"GTPSA.mad_tpsa_tanh!","text":"mad_tpsa_tanh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the tanh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = tanh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_coth!","page":"For Developers","title":"GTPSA.mad_tpsa_coth!","text":"mad_tpsa_coth!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the coth of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = coth(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_sinhc!","page":"For Developers","title":"GTPSA.mad_tpsa_sinhc!","text":"mad_tpsa_sinhc!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the sinhc of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinhc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_asin!","page":"For Developers","title":"GTPSA.mad_tpsa_asin!","text":"mad_tpsa_asin!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the asin of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asin(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_acos!","page":"For Developers","title":"GTPSA.mad_tpsa_acos!","text":"mad_tpsa_acos!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the acos of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_atan!","page":"For Developers","title":"GTPSA.mad_tpsa_atan!","text":"mad_tpsa_atan!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the atan of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = atan(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_acot!","page":"For Developers","title":"GTPSA.mad_tpsa_acot!","text":"mad_tpsa_acot!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the acot of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acot(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_asinc!","page":"For Developers","title":"GTPSA.mad_tpsa_asinc!","text":"mad_tpsa_asinc!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the asinc(a) = asin(a)/a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asinc(a) = asin(a)/a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_asinh!","page":"For Developers","title":"GTPSA.mad_tpsa_asinh!","text":"mad_tpsa_asinh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the asinh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = asinh(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_acosh!","page":"For Developers","title":"GTPSA.mad_tpsa_acosh!","text":"mad_tpsa_acosh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the acosh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = acosh(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_atanh!","page":"For Developers","title":"GTPSA.mad_tpsa_atanh!","text":"mad_tpsa_atanh!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the atanh of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = atanh(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_acoth!","page":"For Developers","title":"GTPSA.mad_tpsa_acoth!","text":"mad_tpsa_acoth!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the acoth of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = acoth(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_asinhc!","page":"For Developers","title":"GTPSA.mad_tpsa_asinhc!","text":"mad_tpsa_asinhc!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the asinhc of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = asinhc(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_erf!","page":"For Developers","title":"GTPSA.mad_tpsa_erf!","text":"mad_tpsa_erf!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the erf of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = erf(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_erfc!","page":"For Developers","title":"GTPSA.mad_tpsa_erfc!","text":"mad_tpsa_erfc!(a::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nSets TPSA c to the erfc of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA `c = erfc(a)'\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_acc!","page":"For Developers","title":"GTPSA.mad_tpsa_acc!","text":"mad_tpsa_acc!(a::Ptr{RTPSA}, v::Cdouble, c::Ptr{RTPSA})\n\nAdds a*v to TPSA c. Aliasing OK.\n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c += v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_scl!","page":"For Developers","title":"GTPSA.mad_tpsa_scl!","text":"mad_tpsa_scl!(a::Ptr{RTPSA}, v::Cdouble, c::Ptr{RTPSA})\n\nSets TPSA c to v*a. \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_inv!","page":"For Developers","title":"GTPSA.mad_tpsa_inv!","text":"mad_tpsa_inv!(a::Ptr{RTPSA},  v::Cdouble, c::Ptr{RTPSA})\n\nSets TPSA c to v/a. \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v/a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_invsqrt!","page":"For Developers","title":"GTPSA.mad_tpsa_invsqrt!","text":"mad_tpsa_invsqrt!(a::Ptr{RTPSA}, v::Cdouble, c::Ptr{RTPSA})\n\nSets TPSA c to v/sqrt(a). \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v/sqrt(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_unit!","page":"For Developers","title":"GTPSA.mad_tpsa_unit!","text":"mad_tpsa_unit!(x::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nInterpreting TPSA as a vector, gets the \"unit vector\", e.g. r = x/norm(x).  May be useful for checking for convergence.\n\nInput\n\nx – Source TPSA x\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_atan2!","page":"For Developers","title":"GTPSA.mad_tpsa_atan2!","text":"mad_tpsa_atan2!(y::Ptr{RTPSA}, x::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nSets TPSA r to atan2(y,x)\n\nInput\n\ny – Source TPSA y\nx – Source TPSA x\n\nOutput\n\nr – Destination TPSA r = atan2(y,x)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_hypot!","page":"For Developers","title":"GTPSA.mad_tpsa_hypot!","text":"mad_tpsa_hypot!(x::Ptr{RTPSA}, y::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nSets TPSA r to sqrt(x^2+y^2). Used to oversimplify polymorphism in code but not optimized\n\nInput\n\nx – Source TPSA x\ny – Source TPSA y\n\nOutput\n\nr – Destination TPSA r = sqrt(x^2+y^2)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_hypot3!","page":"For Developers","title":"GTPSA.mad_tpsa_hypot3!","text":"mad_tpsa_hypot3!(x::Ptr{RTPSA}, y::Ptr{RTPSA}, z::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nSets TPSA r to sqrt(x^2+y^2+z^2)\n\nInput\n\nx – Source TPSA x\ny – Source TPSA y\nz – Source TPSA z\n\nOutput\n\nr – Destination TPSA r = sqrt(x^2+y^2+z^2)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_integ!","page":"For Developers","title":"GTPSA.mad_tpsa_integ!","text":"mad_tpsa_integ!(a::Ptr{RTPSA}, c::Ptr{RTPSA}, iv::Cint)\n\nIntegrates TPSA with respect to the variable with index iv.\n\nInput\n\na  – Source TPSA to integrate\niv – Index of variable to integrate over (e.g. integrate over x, iv = 1). \n\nOutput\n\nc  – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_deriv!","page":"For Developers","title":"GTPSA.mad_tpsa_deriv!","text":"mad_tpsa_deriv!(a::Ptr{RTPSA}, c::Ptr{RTPSA}, iv::Cint)\n\nDifferentiates TPSA with respect to the variable with index iv.\n\nInput\n\na  – Source TPSA to differentiate\niv – Index of variable to take derivative wrt to (e.g. derivative wrt x, iv = 1). \n\nOutput\n\nc  – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_derivm!","page":"For Developers","title":"GTPSA.mad_tpsa_derivm!","text":"mad_tpsa_derivm!(a::Ptr{RTPSA}, c::Ptr{RTPSA}, n::Cint, m::Ptr{Cuchar})\n\nDifferentiates TPSA with respect to the monomial defined by byte array m.\n\nInput\n\na – Source TPSA to differentiate\nn – Length of monomial to differentiate wrt\nm – Monomial to take derivative wrt\n\nOutput\n\nc – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_poisbra!","page":"For Developers","title":"GTPSA.mad_tpsa_poisbra!","text":"mad_tpsa_poisbra!(a::Ptr{RTPSA}, b::Ptr{RTPSA}, c::Ptr{RTPSA}, nv::Cint)\n\nSets TPSA c to the poisson bracket of TPSAs a and b.\n\nInput\n\na  – Source TPSA a\nb  – Source TPSA b\nnv – Number of variables in the TPSA\n\nOutput\n\nc  – Destination TPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_taylor!","page":"For Developers","title":"GTPSA.mad_tpsa_taylor!","text":"mad_tpsa_taylor!(a::Ptr{RTPSA}, n::Cint, coef::Ptr{Cdouble}, c::Ptr{RTPSA})\n\nComputes the result of the Taylor series up to order n-1 with Taylor coefficients coef for the scalar value in a. That is, c = coef[0] + coef[1]*a_0 + coef[2]*a_0^2 + ... where a_0 is the scalar part of TPSA a.\n\nInput\n\na    – TPSA a\nn    – Order-1 of Taylor expansion, size of coef array\ncoef – Array of coefficients in Taylor s\nc    – Result\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axpb!","page":"For Developers","title":"GTPSA.mad_tpsa_axpb!","text":"mad_tpsa_axpb!(a::Cdouble, x::Ptr{RTPSA}, b::Cdouble, r::Ptr{RTPSA})\n\nr = a*x + b\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axpbypc!","page":"For Developers","title":"GTPSA.mad_tpsa_axpbypc!","text":"mad_tpsa_axpbypc!(a::Cdouble, x::Ptr{RTPSA}, b::Cdouble, y::Ptr{RTPSA}, c::Cdouble, r::Ptr{RTPSA})\n\nr = a*x + b*y + c\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\ny – TPSA y\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axypb!","page":"For Developers","title":"GTPSA.mad_tpsa_axypb!","text":"mad_tpsa_axypb!(a::Cdouble, x::Ptr{RTPSA}, y::Ptr{RTPSA}, b::Cdouble, r::Ptr{RTPSA})\n\nr = a*x*y + b\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axypbzpc!","page":"For Developers","title":"GTPSA.mad_tpsa_axypbzpc!","text":"mad_tpsa_axypbzpc!(a::Cdouble, x::Ptr{RTPSA}, y::Ptr{RTPSA}, b::Cdouble, z::Ptr{RTPSA}, c::Cdouble, r::Ptr{RTPSA})\n\nr = a*x*y + b*z + c\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\nz – TPSA z\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axypbvwpc!","page":"For Developers","title":"GTPSA.mad_tpsa_axypbvwpc!","text":"mad_tpsa_axypbvwpc!(a::Cdouble, x::Ptr{RTPSA}, y::Ptr{RTPSA}, b::Cdouble, v::Ptr{RTPSA}, w::Ptr{RTPSA}, c::Cdouble, r::Ptr{RTPSA})\n\nr = a*x*y + b*v*w + c\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\nv – TPSA v\nw – TPSA w\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_ax2pby2pcz2!","page":"For Developers","title":"GTPSA.mad_tpsa_ax2pby2pcz2!","text":"mad_tpsa_ax2pby2pcz2!(a::Cdouble, x::Ptr{RTPSA}, b::Cdouble, y::Ptr{RTPSA}, c::Cdouble, z::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nr = a*x^2 + b*y^2 + c*z^2\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\ny – TPSA y\nc – Scalar c\nz – TPSA z\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_axpsqrtbpcx2!","page":"For Developers","title":"GTPSA.mad_tpsa_axpsqrtbpcx2!","text":"mad_tpsa_axpsqrtbpcx2!(x::Ptr{RTPSA}, a::Cdouble, b::Cdouble, c::Cdouble, r::Ptr{RTPSA})\n\nr = a*x + sqrt(b + c*x^2)\n\nInput\n\nx – TPSA x\na – Scalar a\nb – Scalar b\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_logaxpsqrtbpcx2!","page":"For Developers","title":"GTPSA.mad_tpsa_logaxpsqrtbpcx2!","text":"mad_tpsa_logaxpsqrtbpcx2!(x::Ptr{RTPSA}, a::Cdouble, b::Cdouble, c::Cdouble, r::Ptr{RTPSA})\n\nr = log(a*x + sqrt(b + c*x^2))\n\nInput\n\nx – TPSA x\na – Scalar a\nb – Scalar b\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_logxdy!","page":"For Developers","title":"GTPSA.mad_tpsa_logxdy!","text":"mad_tpsa_logxdy!(x::Ptr{RTPSA}, y::Ptr{RTPSA}, r::Ptr{RTPSA})\n\nr = log(x / y)\n\nInput\n\nx – TPSA x\ny – TPSA y\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_vec2fld!","page":"For Developers","title":"GTPSA.mad_tpsa_vec2fld!","text":"mad_tpsa_vec2fld!(na::Cint, a::Ptr{RTPSA}, mc::Ptr{Ptr{RTPSA}})\n\nWrites the vector a in terms  mc is a map (m is map) Take vector a, write in terms of all variables in mc  scalar potential described as TPSA -> vector field ??? Map to hamiltonian\n\nInput\n\nna  – Number of TPSA in mc consistent with number of variables in a\na   \nmc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_fld2vec!","page":"For Developers","title":"GTPSA.mad_tpsa_fld2vec!","text":"mad_tpsa_fld2vec!(na::Cint, ma::Ptr{Ptr{RTPSA}}, c::Ptr{RTPSA})\n\n???\n\nInput\n\nna\nma\nc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_fgrad!","page":"For Developers","title":"GTPSA.mad_tpsa_fgrad!","text":"mad_tpsa_fgrad!(na::Cint, ma::Ptr{Ptr{RTPSA}}, b::Ptr{RTPSA}, c::Ptr{RTPSA})\n\nDerivating vs a variable,. multiply and add sum Deriving a map vs each variable by itself TPSA ??? \"Incomplete operator\" used by the incomplete poisson bracket- computing PB with only 1  only positive part of PB Taking 1 TPSA, derive TPSA vs all variables, multiply result by variable in map and then sum\n\nInput\n\nna\nma\nb\nc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_liebra!","page":"For Developers","title":"GTPSA.mad_tpsa_liebra!","text":"mad_tpsa_liebra!(na::Cint, ma::Ptr{Ptr{RTPSA}}, mb::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}})\n\nComputes the Lie bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in map ma and map mb\nma – Map ma\nmb – Map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_exppb!","page":"For Developers","title":"GTPSA.mad_tpsa_exppb!","text":"mad_tpsa_exppb!(na::Cint, ma::Ptr{Ptr{RTPSA}}, mb::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}})\n\nComputes the exponential of the Poisson bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in map ma and map mb\nma – Map ma\nmb – Map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_logpb!","page":"For Developers","title":"GTPSA.mad_tpsa_logpb!","text":"mad_tpsa_logpb!(na::Cint, ma::Ptr{Ptr{RTPSA}}, mb::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}})\n\nComputes the log of the Poisson bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in map ma and map mb\nma – map ma\nmb – map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_mnrm","page":"For Developers","title":"GTPSA.mad_tpsa_mnrm","text":"mad_tpsa_mnrm(na::Cint, ma::Ptr{Ptr{RTPSA}})::Cdouble\n\nComputes the norm of the map (sum of absolute value of coefficients of all TPSAs in the map).\n\nInput\n\nna  – Number of TPSAs in the map\nma  – map ma\n\nOutput\n\nnrm – Norm of map (sum of absolute value of coefficients of all TPSAs in the map)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_minv!","page":"For Developers","title":"GTPSA.mad_tpsa_minv!","text":"mad_tpsa_minv!(na::Cint, ma::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}})\n\nInverts the map.\n\nInput\n\nna – Number of TPSAs in the map\nma – map ma\n\nOutput\n\nmc – Inversion of map ma\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_pminv!","page":"For Developers","title":"GTPSA.mad_tpsa_pminv!","text":"mad_tpsa_pminv!(na::Cint, ma::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}}, select::Ptr{Cint})\n\nComputes the partial inverse of the map with only the selected variables, specified by 0s or 1s in select.\n\nInput\n\nna     – Number of TPSAs in ma\nma     – map ma\nselect – Array of 0s or 1s defining which variables to do inverse on (atleast same size as na)'\n\nOutput\n\nmc     – Partially inverted map using variables specified as 1 in the select array\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_compose!","page":"For Developers","title":"GTPSA.mad_tpsa_compose!","text":"mad_tpsa_compose!(na::Cint, ma::Ptr{Ptr{RTPSA}}, nb::Cint, mb::Ptr{Ptr{RTPSA}}, mc::Ptr{Ptr{RTPSA}})\n\nComposes two maps.\n\nInput\n\nna – Number of TPSAs in map ma\nma – map ma\nnb – Number of TPSAs in map mb\nmb – map mb\n\nOutput\n\nmc – Composition of maps ma and mb\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_translate!","page":"For Developers","title":"GTPSA.mad_tpsa_translate!","text":"mad_tpsa_translate!(na::Cint, ma::Ptr{Ptr{RTPSA}}, nb::Cint, tb::Ptr{Cdouble}, mc::Ptr{Ptr{RTPSA}})\n\nTranslates the expansion point of the map by the amount tb.\n\nInput\n\nna – Number of TPSAS in the map\nma – map ma\nnb – Length of tb\ntb – Vector of amount to translate for each variable\n\nOutput\n\nmc – Map evaluated at the new point translated tb from the original evaluation point\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_eval!","page":"For Developers","title":"GTPSA.mad_tpsa_eval!","text":"mad_tpsa_eval!(na::Cint, ma::Ptr{Ptr{RTPSA}}, nb::Cint, tb::Ptr{Cdouble}, tc::Ptr{Cdouble})\n\nEvaluates the map at the point tb\n\nInput\n\nna – Number of TPSAs in the map\nma – map ma\nnb – Length of tb\ntb – Point at which to evaluate the map\n\nOutput\n\ntc – Values for each TPSA in the map evaluated at the point tb\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_mconv!","page":"For Developers","title":"GTPSA.mad_tpsa_mconv!","text":"mad_tpsa_mconv!(na::Cint, ma::Ptr{Ptr{RTPSA}}, nc::Cint, mc::Ptr{Ptr{RTPSA}}, n::Cint, t2r_::Ptr{Cint}, pb::Cint)\n\nEquivalent to mad_tpsa_convert, but applies the conversion to all TPSAs in the map ma.\n\nInput\n\nna   – Number of TPSAs in the map\nma   – map ma\nnc   – Number of TPSAs in the output map mc\nn    – Length of vector (size of t2r_)\nt2r_ – (Optional) Vector of index lookup\npb   – Poisson bracket, 0, 1:fwd, -1:bwd\n\nOutput\n\nmc   – map mc with specified conversions \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_print","page":"For Developers","title":"GTPSA.mad_tpsa_print","text":"mad_tpsa_print(t::Ptr{RTPSA}, name_::Cstring, eps_::Cdouble, nohdr_::Cint, stream_::Ptr{Cvoid})\n\nPrints the TPSA coefficients with precision eps_. If nohdr_ is not zero,  the header is not printed. \n\nInput\n\nt       – TPSA to print\nname_   – (Optional) Name of TPSA\neps_    – (Optional) Precision to output\nnohdr_  – (Optional) If True, no header is printed\nstream_ – (Optional) FILE pointer of output stream. Default is stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_scan","page":"For Developers","title":"GTPSA.mad_tpsa_scan","text":"mad_tpsa_scan(stream_::Ptr{Cvoid})::Ptr{RTPSA}\n\nScans in a TPSA from the stream_.\n\nInput\n\nstream_ – (Optional) I/O stream from which to read the TPSA, default is stdin\n\nOutput\n\nt       – TPSA scanned from I/O stream_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_scan_hdr","page":"For Developers","title":"GTPSA.mad_tpsa_scan_hdr","text":"mad_tpsa_scan_hdr(kind_::Ptr{Cint}, name_::Ptr{Cuchar}, stream_::Ptr{Cvoid})::Ptr{Desc}\n\nRead TPSA header. Returns descriptor for TPSA given the header. This is useful for external languages using  this library where the memory is managed NOT on the C side.\n\nInput\n\nkind_   – (Optional) Real or complex TPSA, or detect automatically if not provided.\nname_   – (Optional) Name of TPSA\nstream_ – (Optional) I/O stream to read TPSA from,  default is stdin\n\nOutput\n\nret     – Descriptor for the TPSA \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_scan_coef!","page":"For Developers","title":"GTPSA.mad_tpsa_scan_coef!","text":"mad_tpsa_scan_coef!(t::Ptr{RTPSA}, stream_::Ptr{Cvoid})\n\nRead TPSA coefficients into TPSA t. This should be used with mad_tpsa_scan_hdr for external languages using  this library where the memory is managed NOT on the C side.\n\nInput\n\nstream_ – (Optional) I/O stream to read TPSA from,  default is stdin\n\nOutput\n\nt       – TPSA with coefficients scanned from stream_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_debug","page":"For Developers","title":"GTPSA.mad_tpsa_debug","text":"mad_tpsa_debug(t::Ptr{RTPSA}, name_::Cstring, fnam_::Cstring, line_::Cint, stream_::Ptr{Cvoid})\n\nPrints TPSA with all information of data structure.\n\nInput\n\nt       – TPSA\nname_   – (Optional) Name of TPSA\nfnam_   – (Optional) File name to print to\nline_   – (Optional) Line number in file to start at\nstream_ – (Optional) I/O stream to print to, default is stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_isvalid","page":"For Developers","title":"GTPSA.mad_tpsa_isvalid","text":"mad_tpsa_isvalid(t::Ptr{RTPSA})::Cuchar\n\nSanity check of the TPSA integrity.\n\nInput\n\nt – TPSA to check if valid\n\nOutput\n\nret  – True if valid TPSA, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_tpsa_init!","page":"For Developers","title":"GTPSA.mad_tpsa_init!","text":"mad_tpsa_init(t::Ptr{RTPSA}, d::Ptr{Desc}, mo::Cuchar)::Ptr{RTPSA}\n\nUnsafe initialization of an already existing TPSA t with maximum order mo to the descriptor d. mo must be less than  the maximum order of the descriptor. t is modified in place and also returned.\n\nInput\n\nt  – TPSA to initialize to descriptor d\nd  – Descriptor\nmo – Maximum order of the TPSA (must be less than maximum order of the descriptor)\n\nOutput\n\nt  – TPSA initialized to descriptor d with maximum order mo\n\n\n\n\n\n","category":"function"},{"location":"devel/#CTPSA","page":"For Developers","title":"CTPSA","text":"","category":"section"},{"location":"devel/","page":"For Developers","title":"For Developers","text":"CTPSA\nmad_ctpsa_newd\nmad_ctpsa_new\nmad_ctpsa_del!\nmad_ctpsa_desc\nmad_ctpsa_uid!\nmad_ctpsa_len\nmad_ctpsa_nam\nmad_ctpsa_ord\nmad_ctpsa_ordv\nmad_ctpsa_ordn\nmad_ctpsa_copy!\nmad_ctpsa_sclord!\nmad_ctpsa_getord!\nmad_ctpsa_cutord!\nmad_ctpsa_maxord\nmad_ctpsa_convert!\nmad_ctpsa_setvar!\nmad_ctpsa_setvar_r!\nmad_ctpsa_setval!\nmad_ctpsa_setval_r!\nmad_ctpsa_setnam!\nmad_ctpsa_clear!\nmad_ctpsa_isnul\nmad_ctpsa_cplx!\nmad_ctpsa_real!\nmad_ctpsa_imag!\nmad_ctpsa_cabs!\nmad_ctpsa_carg!\nmad_ctpsa_unit!\nmad_ctpsa_rect!\nmad_ctpsa_polar!\nmad_ctpsa_mono!\nmad_ctpsa_idxs\nmad_ctpsa_idxm\nmad_ctpsa_idxsm\nmad_ctpsa_cycle!\nmad_ctpsa_get0\nmad_ctpsa_geti\nmad_ctpsa_gets\nmad_ctpsa_getm\nmad_ctpsa_getsm\nmad_ctpsa_set0!\nmad_ctpsa_seti!\nmad_ctpsa_sets!\nmad_ctpsa_setm!\nmad_ctpsa_setsm!\nmad_ctpsa_get0_r!\nmad_ctpsa_geti_r!\nmad_ctpsa_gets_r!\nmad_ctpsa_getm_r!\nmad_ctpsa_getsm_r!\nmad_ctpsa_set0_r!\nmad_ctpsa_seti_r!\nmad_ctpsa_sets_r!\nmad_ctpsa_setm_r!\nmad_ctpsa_setsm_r!\nmad_ctpsa_getv!\nmad_ctpsa_setv!\nmad_ctpsa_equ\nmad_ctpsa_dif!\nmad_ctpsa_add!\nmad_ctpsa_sub!\nmad_ctpsa_mul!\nmad_ctpsa_div!\nmad_ctpsa_pow!\nmad_ctpsa_powi!\nmad_ctpsa_pown!\nmad_ctpsa_pown_r!\nmad_ctpsa_equt\nmad_ctpsa_dift!\nmad_ctpsa_tdif!\nmad_ctpsa_addt!\nmad_ctpsa_subt!\nmad_ctpsa_tsub!\nmad_ctpsa_mult!\nmad_ctpsa_divt!\nmad_ctpsa_tdiv!\nmad_ctpsa_powt!\nmad_ctpsa_tpow!\nmad_ctpsa_nrm\nmad_ctpsa_conj!\nmad_ctpsa_sqrt!\nmad_ctpsa_exp!\nmad_ctpsa_log!\nmad_ctpsa_sincos!\nmad_ctpsa_sin!\nmad_ctpsa_cos!\nmad_ctpsa_tan!\nmad_ctpsa_cot!\nmad_ctpsa_sinc!\nmad_ctpsa_sincosh!\nmad_ctpsa_sinh!\nmad_ctpsa_cosh!\nmad_ctpsa_tanh!\nmad_ctpsa_coth!\nmad_ctpsa_sinhc!\nmad_ctpsa_asin!\nmad_ctpsa_acos!\nmad_ctpsa_atan!\nmad_ctpsa_acot!\nmad_ctpsa_asinc!\nmad_ctpsa_asinh!\nmad_ctpsa_acosh!\nmad_ctpsa_atanh!\nmad_ctpsa_acoth!\nmad_ctpsa_asinhc!\nmad_ctpsa_erf!\nmad_ctpsa_erfc!\nmad_ctpsa_acc!\nmad_ctpsa_scl!\nmad_ctpsa_inv!\nmad_ctpsa_invsqrt!\nmad_ctpsa_hypot!\nmad_ctpsa_hypot3!\nmad_ctpsa_integ!\nmad_ctpsa_deriv!\nmad_ctpsa_derivm!\nmad_ctpsa_poisbra!\nmad_ctpsa_taylor!\nmad_ctpsa_poisbrat!\nmad_ctpsa_tpoisbra!\nmad_ctpsa_acc_r!\nmad_ctpsa_scl_r!\nmad_ctpsa_inv_r!\nmad_ctpsa_invsqrt_r!\nmad_ctpsa_axpb!\nmad_ctpsa_axpbypc!\nmad_ctpsa_axypb!\nmad_ctpsa_axypbzpc!\nmad_ctpsa_axypbvwpc!\nmad_ctpsa_ax2pby2pcz2!\nmad_ctpsa_axpsqrtbpcx2!\nmad_ctpsa_logaxpsqrtbpcx2!\nmad_ctpsa_logxdy!\nmad_ctpsa_axpb_r!\nmad_ctpsa_axpbypc_r!\nmad_ctpsa_axypb_r!\nmad_ctpsa_axypbzpc_r!\nmad_ctpsa_axypbvwpc_r!\nmad_ctpsa_ax2pby2pcz2_r!\nmad_ctpsa_axpsqrtbpcx2_r!\nmad_ctpsa_logaxpsqrtbpcx2_r!\nmad_ctpsa_vec2fld!\nmad_ctpsa_fld2vec!\nmad_ctpsa_fgrad!\nmad_ctpsa_liebra!\nmad_ctpsa_exppb!\nmad_ctpsa_logpb!\nmad_ctpsa_mnrm\nmad_ctpsa_minv!\nmad_ctpsa_pminv!\nmad_ctpsa_compose!\nmad_ctpsa_translate!\nmad_ctpsa_eval!\nmad_ctpsa_mconv!\nmad_ctpsa_print\nmad_ctpsa_scan\nmad_ctpsa_scan_hdr\nmad_ctpsa_scan_coef!\nmad_ctpsa_debug\nmad_ctpsa_isvalid\nmad_ctpsa_init!","category":"page"},{"location":"devel/#GTPSA.CTPSA","page":"For Developers","title":"GTPSA.CTPSA","text":"`CTPSA`\n\nThis is a 1-to-1 struct for the C definition ctpsa (complex TPSA) in GTPSA.\n\nFields\n\nd::Ptr{Cvoid}             – Pointer to Desc for this CTPSA\nuid::Cint                 – Special user field for external use (and padding)\nmo::Cuchar                – max ord (allocated)\nlo::Cuchar                – lowest used ord\nhi::Cuchar                – highest used ord\nnz::Culonglong            – zero/nonzero homogenous polynomials. Note: Int64 if 64 bit compiled C code, else 32 bit\nnam::NTuple{NAMSZ,Cuchar} – tpsa name max string length 16 NAMSZ\ncoef::Ptr{Cdouble}        – warning: must be identical to ctpsa up to coef excluded                                                                                                  \n\n\n\n\n\n","category":"type"},{"location":"devel/#GTPSA.mad_ctpsa_newd","page":"For Developers","title":"GTPSA.mad_ctpsa_newd","text":"mad_ctpsa_newd(d::Ptr{Desc}, mo::Cuchar)::Ptr{CTPSA}\n\nCreates a complex TPSA defined by the specified descriptor and maximum order. If MADCTPSADEFAULT  is passed for mo, the mo defined in the descriptor is used. If mo > d_mo, then mo = d_mo.\n\nInput\n\nd  – Descriptor\nmo – Maximum order\n\nOutput\n\nt  – New complex TPSA defined by the descriptor\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_new","page":"For Developers","title":"GTPSA.mad_ctpsa_new","text":"mad_ctpsa_new(t::Ptr{CTPSA}, mo::Cuchar)::Ptr{CTPSA}\n\nCreates a blank TPSA with same number of variables/parameters of the inputted TPSA,  with maximum order specified by mo. If MAD_TPSA_SAME is passed for mo, the mo  currently in t is used for the created TPSA. Ok with t=(tpsa_t*)ctpsa\n\nInput\n\nt   – TPSA\nmo  – Maximum order of new TPSA\n\nOutput\n\nret – New blank TPSA with maximum order mo\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_del!","page":"For Developers","title":"GTPSA.mad_ctpsa_del!","text":"mad_ctpsa_del!(t::Ptr{CTPSA})\n\nCalls the destructor for the complex TPSA.\n\nInput\n\nt – Complex TPSA to destruct\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_desc","page":"For Developers","title":"GTPSA.mad_ctpsa_desc","text":"mad_ctpsa_desc(t::Ptr{CTPSA})::Ptr{Desc}\n\nGets the descriptor for the complex TPSA.\n\nInput\n\nt   – Complex TPSA\n\nOutput\n\nret – Descriptor for the TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_uid!","page":"For Developers","title":"GTPSA.mad_ctpsa_uid!","text":"mad_ctpsa_uid!(t::Ptr{CTPSA}, uid_::Cint)::Cint\n\nSets the TPSA uid if uid_ != 0, and returns the current (previous if set) TPSA uid. \n\nInput\n\nt    – Complex TPSA\nuid_ – uid to set in the TPSA if uid_ != 0\n\nOutput\n\nret  – Current (previous if set) TPSA uid\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_len","page":"For Developers","title":"GTPSA.mad_ctpsa_len","text":"mad_ctpsa_len(t::Ptr{CTPSA})::Cint\n\nGets the length of the TPSA itself (e.g. the descriptor may be order 10 but TPSA may only be order 2)\n\nInput\n\nt   – Complex TPSA\n\nOutput\n\nret – Length of CTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_nam","page":"For Developers","title":"GTPSA.mad_ctpsa_nam","text":"mad_ctpsa_nam(t::Ptr{CTPSA})::Cstring\n\nGet the name of the TPSA.\n\nInput\n\nt    – Complex TPSA\n\nOutput\n\nret  – Name of CTPSA (Null terminated in C)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_ord","page":"For Developers","title":"GTPSA.mad_ctpsa_ord","text":"mad_ctpsa_ord(t::Ptr{CTPSA})::Cuchar\n\nGets the TPSA order.\n\nInput\n\nt   – Complex TPSA\n\nOutput\n\nret – Order of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_ordv","page":"For Developers","title":"GTPSA.mad_ctpsa_ordv","text":"mad_ctpsa_ordv(t::Ptr{CTPSA}, ts::Ptr{CTPSA}...)::Cuchar\n\nReturns maximum order of all TPSAs provided.\n\nInput\n\nt  – TPSA\nts – Variable number of TPSAs passed as parameters\n\nOutput\n\nmo – Maximum order of all TPSAs provided\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_ordn","page":"For Developers","title":"GTPSA.mad_ctpsa_ordn","text":"mad_ctpsa_ordn(n::Cint, t::Ptr{Ptr{CTPSA}})::Cuchar\n\nReturns the max order of all TPSAs in t.\n\nInput\n\nn  – Number of TPSAs\nt  – Array of TPSAs \n\nOutput\n\nmo – Maximum order of all TPSAs\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_copy!","page":"For Developers","title":"GTPSA.mad_ctpsa_copy!","text":"mad_ctpsa_copy!(t::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nMakes a copy of the complex TPSA t to r.\n\nInput\n\nt – Source complex TPSA\n\nOutput\n\nr – Destination complex TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sclord!","page":"For Developers","title":"GTPSA.mad_ctpsa_sclord!","text":"mad_ctpsa_sclord!(t::Ptr{CTPSA}, r::Ptr{CTPSA}, inv::Cuchar, prm::Cuchar)\n\nScales all coefficients by order. If inv == 0, scales coefficients by order (derivation), else scales coefficients  by 1/order (integration).\n\nInput\n\nt   – Source complex TPSA\ninv – Put order up, divide, scale by inv of value of order\nprm – Parameters flag. If set to 0x0, the scaling excludes the order of the parameters in the monomials. Else, scaling is with total order of monomial\n\nOutput\n\nr   – Destination complex TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getord!","page":"For Developers","title":"GTPSA.mad_ctpsa_getord!","text":"mad_ctpsa_getord!(t::Ptr{CTPSA}, r::Ptr{CTPSA}, ord::Cuchar)\n\nExtract one homogeneous polynomial of the given order\n\nInput\n\nt  – Sourcecomplex TPSA\nord – Order to retrieve\n\nOutput\n\nr   – Destination complex TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cutord!","page":"For Developers","title":"GTPSA.mad_ctpsa_cutord!","text":"mad_ctpsa_cutord!(t::Ptr{CTPSA}, r::Ptr{CTPSA}, ord::Cint)\n\nCuts the TPSA off at the given order and above, or if ord is negative, will cut orders below  abs(ord) (e.g. if ord = -3, then orders 0-3 are cut off).\n\nInput\n\nt   – Source complex TPSA\nord – Cut order: 0..-ord or ord..mo\n\nOutput\n\nr   – Destination complex TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_maxord","page":"For Developers","title":"GTPSA.mad_ctpsa_maxord","text":"mad_ctpsa_maxord(t::Ptr{CTPSA}, n::Cint, idx_::Ptr{Cint})::Cint\n\nReturns the index to the monomial with maximum abs(coefficient) in the TPSA for all orders 0 to n. If idx_  is provided, it is filled with the indices for the maximum abs(coefficient) monomial for each order up to n. \n\nInput\n\nt    – Complex TPSA\nn    – Highest order to include in finding the maximum abs(coefficient) in the TPSA, length of idx_ if provided\n\nOutput\n\nidx_ – (Optional) If provided, is filled with indices to the monomial for each order up to n with maximum abs(coefficient)\nmi   – Index to the monomial in the TPSA with maximum abs(coefficient)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_convert!","page":"For Developers","title":"GTPSA.mad_ctpsa_convert!","text":"mad_ctpsa_convert!(t::Ptr{CTPSA}, r::Ptr{CTPSA}, n::Cint, t2r_::Ptr{Cint}, pb::Cint)\n\nGeneral function to convert TPSAs to different orders and reshuffle canonical coordinates. The destination TPSA will  be of order n, and optionally have the variable reshuffling defined by t2r_ and poisson bracket sign. e.g. if  t2r_ = {1,2,3,4,6,5} and pb = -1, canonical coordinates 6 and 5 are swapped and the new 5th canonical coordinate  will be negated. Useful for comparing with different differential algebra packages.\n\nInput\n\nt    – Source complex TPSA\nn    – Length of vector\nt2r_ – (Optional) Vector of index lookup\npb   – Poisson bracket, 0, 1:fwd, -1:bwd\n\nOutput\n\nr    – Destination complex TPSA with specified order and canonical coordinate reshuffling.\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setvar!","page":"For Developers","title":"GTPSA.mad_ctpsa_setvar!","text":"mad_ctpsa_setvar!(t::Ptr{CTPSA}, v::ComplexF64, iv_::Cint, scl_::ComplexF64)\n\nSets the 0th and 1st order values for the variables.\n\nInput\n\nt    – Real TPSA\nv    – 0th order value (coefficient)\niv_  – (Optional) Variable index, optional if order of TPSA is 0 (behaves like mad_ctpsa_setval then)\nscl_ – 1st order variable value (typically will be 1)\n\n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setvar_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_setvar_r!","text":"mad_ctpsa_setvar_r!(t::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble, iv_::Cint, scl_re_::Cdouble, scl_im_::Cdouble)\n\nSets the 0th and 1st order values for the variables. Equivalent to mad_ctpsa_setvar but without complex-by-value arguments.\n\nInput\n\nt       – Complex TPSA\nv_re    – Real part of 0th order value\nv_im    – Imaginary part of 0th order value\niv_     – (Optional) Variable index, optional if order of TPSA is 0 (behaves like mad_ctpsa_setval then)\nscl_re_ – (Optional) Real part of 1st order variable value\nscl_im_ – (Optional)Imaginary part of 1st order variable value\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setval!","page":"For Developers","title":"GTPSA.mad_ctpsa_setval!","text":"mad_ctpsa_setval!(t::Ptr{CTPSA}, v::ComplexF64)\n\nSets the scalar part of the TPSA to v and all other values to 0 (sets the TPSA order to 0).\n\nInput\n\nt – TPSA to set to scalar\nv – Scalar value to set TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setval_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_setval_r!","text":"mad_ctpsa_setval_r!(t::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble)\n\nSets the scalar part of the TPSA to v and all other values to 0 (sets the TPSA order to 0). Equivalent to mad_ctpsa_setval but without complex-by-value arguments.\n\nInput\n\nt    – TPSA to set to scalar\nv_re – Real part of scalar value to set TPSA\nv_im – Imaginary part of scalar value to set TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setnam!","page":"For Developers","title":"GTPSA.mad_ctpsa_setnam!","text":"mad_ctpsa_setnam!(t::Ptr{CTPSA}, nam::Cstring)\n\nSets the name of the CTPSA.\n\nInput\n\nt   – Complex TPSA\nnam – Name to set for CTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_clear!","page":"For Developers","title":"GTPSA.mad_ctpsa_clear!","text":"mad_ctpsa_clear!(t::Ptr{CTPSA})\n\nClears the TPSA (reset to 0)\n\nInput\n\nt – Complex TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_isnul","page":"For Developers","title":"GTPSA.mad_ctpsa_isnul","text":"mad_ctpsa_isnul(t::Ptr{CTPSA})::Cuchar\n\nChecks if TPSA is 0 or not\n\nInput\n\nt    – Complex TPSA to check\n\nOutput\n\nret  – True or false\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cplx!","page":"For Developers","title":"GTPSA.mad_ctpsa_cplx!","text":"mad_ctpsa_cplx!(re_::Ptr{RTPSA}, im_::Ptr{RTPSA}, r::Ptr{CTPSA})\n\nCreates a CTPSA with real and imaginary parts from the RTPSAs re_ and im_ respectively.\n\nInput\n\nre_ – Real part of CTPSA to make\nim_ – Imaginary part of CTPSA to make\n\nOutput\n\nr   – Destination CTPSA with r = re_ + im*im_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_real!","page":"For Developers","title":"GTPSA.mad_ctpsa_real!","text":"mad_ctpsa_real!(t::Ptr{CTPSA}, r::Ptr{RTPSA})\n\nSets the RTPSA r equal to the real part of CTPSA t.\n\nInput\n\nt – Source CTPSA\n\nOutput\n\nr – Destination RTPSA with r = Re(t)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_imag!","page":"For Developers","title":"GTPSA.mad_ctpsa_imag!","text":"mad_ctpsa_imag!(t::Ptr{CTPSA}, r::Ptr{RTPSA})\n\nSets the RTPSA r equal to the imaginary part of CTPSA t.\n\nInput\n\nt – Source CTPSA\n\nOutput\n\nr – Destination RTPSA with r = Im(t)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cabs!","page":"For Developers","title":"GTPSA.mad_ctpsa_cabs!","text":"mad_ctpsa_cabs!(t::Ptr{CTPSA}, r::Ptr{RTPSA})\n\nSets the RTPSA r equal to the aboslute value of CTPSA t. Specifically, the  result contains a TPSA with the abs of all coefficients.\n\nInput\n\nt – Source CTPSA\n\nOutput\n\nr – Destination RTPSA with r = |t|\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_carg!","page":"For Developers","title":"GTPSA.mad_ctpsa_carg!","text":"mad_ctpsa_carg!(t::Ptr{CTPSA}, r::Ptr{RTPSA})\n\nSets the RTPSA r equal to the argument (phase) of CTPSA t\n\nInput\n\nt – Source CTPSA\n\nOutput\n\nr – Destination RTPSA with r = carg(t)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_unit!","page":"For Developers","title":"GTPSA.mad_ctpsa_unit!","text":"mad_ctpsa_unit!(t::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nInterpreting TPSA a vector, gets the \"unit vector\", e.g. r = t/norm(t). May be useful for checking for convergence.\n\nInput\n\nt – Source TPSA x\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_rect!","page":"For Developers","title":"GTPSA.mad_ctpsa_rect!","text":"mad_ctpsa_rect!(t::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nSets r = Re(t)*cos(Im(t)) + im*Re(t)*sin(Im(t))\n\nInput\n\nt – Source CTPSA\nr – Destination CTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_polar!","page":"For Developers","title":"GTPSA.mad_ctpsa_polar!","text":"mad_ctpsa_polar!(t::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nSets r = |t| + im*atan2(Im(t), Re(t))\n\nInput\n\nt – Source CTPSA\nr – Destination CTPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_mono!","page":"For Developers","title":"GTPSA.mad_ctpsa_mono!","text":"mad_ctpsa_mono!(t::Ptr{CTPSA}, i::Cint, n::Cint, m_::Ptr{Cuchar}, p_::Ptr{Cuchar})::Cuchar\n\nReturns the order of the monomial at index i in the TPSA and optionally the monomial at that index is returned in m_ and the order of parameters in the monomial in p_\n\nInput\n\nt   – TPSA\ni   – Index valid in TPSA\nn   – Length of monomial\n\nOutput\n\nm_  – (Optional) Monomial at index i in TPSA\np_  – (Optional) Order of parameters in monomial\nret – Order of monomial in TPSA a index i\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_idxs","page":"For Developers","title":"GTPSA.mad_ctpsa_idxs","text":"mad_ctpsa_idxs(t::Ptr{CTPSA}, n::Cint, s::Cstring)::Cint\n\nReturns index of monomial in the TPSA given the monomial as string. This generally should not be used, as there  are no assumptions about which monomial is attached to which index.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as string\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_idxm","page":"For Developers","title":"GTPSA.mad_ctpsa_idxm","text":"mad_ctpsa_idxm(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar})::Cint\n\nReturns index of monomial in the TPSA given the monomial as a byte array. This generally should not be used, as there  are no assumptions about which monomial is attached to which index.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as byte array\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_idxsm","page":"For Developers","title":"GTPSA.mad_ctpsa_idxsm","text":"mad_ctpsa_idxsm(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cint})::Cint\n\nReturns index of monomial in the TPSA given the monomial as a sparse monomial. This generally should not be used, as there  are no assumptions about which monomial is attached to which index.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\ns   – Monomial as sparse monomial\n\nOutput\n\nret – Index of monomial in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cycle!","page":"For Developers","title":"GTPSA.mad_ctpsa_cycle!","text":"mad_ctpsa_cycle!(t::Ptr{CTPSA}, i::Cint, n::Cint, m_::Ptr{Cuchar}, v_::Ptr{Cdouble})::Cint\n\nUsed for scanning through each nonzero monomial in the TPSA. Given a starting index (-1 if starting at 0), will  optionally fill monomial m_ with the monomial at index i and the value at v_ with the monomials coefficient, and  return the next NONZERO monomial index in the TPSA. This is useful for building an iterator through the TPSA.\n\nInput\n\nt  – TPSA to scan\ni  – Index to start from (-1 to start at 0)\nn  – Size of monomial\nm_ – (Optional) Monomial to be filled if provided\nv_ – (Optional) Pointer to value of coefficient\n\nOutput\n\ni  – Index of next nonzero monomial in the TPSA, or -1 if reached the end\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_get0","page":"For Developers","title":"GTPSA.mad_ctpsa_get0","text":"mad_ctpsa_get0(t::Ptr{CTPSA})::ComplexF64\n\nGets the 0th order (scalar) value of the TPSA\n\nInput\n\nt   – TPSA\n\nOutput\n\nret – Scalar value of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_geti","page":"For Developers","title":"GTPSA.mad_ctpsa_geti","text":"mad_ctpsa_geti(t::Ptr{CTPSA}, i::Cint)::ComplexF64\n\nGets the coefficient of the monomial at index i.  Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\ni   – Monomial index\n\nOutput\n\nret – Coefficient of monomial at index i\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_gets","page":"For Developers","title":"GTPSA.mad_ctpsa_gets","text":"mad_ctpsa_gets(t::Ptr{CTPSA}, n::Cint, s::Cstring)::ComplexF64\n\nGets the coefficient of the monomial s defined as a string. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Size of monomial\ns   – Monomial as string\n\nOutput\n\nret – Coefficient of monomial s in TPSA \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getm","page":"For Developers","title":"GTPSA.mad_ctpsa_getm","text":"mad_ctpsa_getm(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar})::ComplexF64\n\nGets the coefficient of the monomial m defined as a byte array. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\nm   – Monomial as byte array\n\nOutput\n\nret – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getsm","page":"For Developers","title":"GTPSA.mad_ctpsa_getsm","text":"mad_ctpsa_getsm(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cint})::ComplexF64\n\nGets the coefficient of the monomial m defined as a sparse monomial. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt   – TPSA\nn   – Length of monomial\nm   – Monomial as sparse monomial\n\nOutput\n\nret – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_set0!","page":"For Developers","title":"GTPSA.mad_ctpsa_set0!","text":"mad_ctpsa_set0!(t::Ptr{CTPSA}, a::ComplexF64, b::ComplexF64)\n\nSets the 0th order coefficient (scalar part of TPSA) according to coef[0] = a*coef[0] + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\na – Scaling of current 0th order value\nb – Constant added to current 0th order value\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_seti!","page":"For Developers","title":"GTPSA.mad_ctpsa_seti!","text":"mad_ctpsa_seti!(t::Ptr{CTPSA}, i::Cint, a::ComplexF64, b::ComplexF64)\n\nSets the coefficient of monomial at index i to coef[i] = a*coef[i] + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\ni – Index of monomial\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sets!","page":"For Developers","title":"GTPSA.mad_ctpsa_sets!","text":"mad_ctpsa_sets!(t::Ptr{CTPSA}, n::Cint, s::Cstring, a::ComplexF64, b::ComplexF64)\n\nSets the coefficient of monomial defined by string s to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\ns – Monomial as string\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setm!","page":"For Developers","title":"GTPSA.mad_ctpsa_setm!","text":"mad_ctpsa_setm!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar}, a::ComplexF64, b::ComplexF64)\n\nSets the coefficient of monomial defined by byte array m to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as byte array\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setsm!","page":"For Developers","title":"GTPSA.mad_ctpsa_setsm!","text":"mad_ctpsa_setsm!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cint}, a::ComplexF64, b::ComplexF64)\n\nSets the coefficient of monomial defined by sparse monomial m to coef = a*coef + b. Does not modify other values in TPSA.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as sparse monomial\na – Scaling of current coefficient\nb – Constant added to current coefficient\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_get0_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_get0_r!","text":"mad_ctpsa_get0_r!(t::Ptr{CTPSA}, r::Ptr{ComplexF64})\n\nGets the 0th order (scalar) value of the TPSA in place.\n\nInput\n\nt – TPSA\n\nOutput\n\nr – Scalar value of TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_geti_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_geti_r!","text":"mad_ctpsa_geti_r!(t::Ptr{CTPSA}, i::Cint,  r::Ptr{ComplexF64})\n\nGets the coefficient of the monomial at index i in place. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt – TPSA\ni – Monomial index\n\nOutput\n\nr – Coefficient of monomial at index i\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_gets_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_gets_r!","text":"mad_ctpsa_gets_r!(t::Ptr{CTPSA}, n::Cint, s::Cstring, r::Ptr{ComplexF64})\n\nGets the coefficient of the monomial s defined as a string in place. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt – TPSA\nn – Length of monomial\ns – Monomial as string\n\nOutput\n\nr – Coefficient of monomial s in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getm_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_getm_r!","text":"mad_ctpsa_getm_r!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar}, r::Ptr{ComplexF64})\n\nGets the coefficient of the monomial m defined as a byte array in place. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as byte array\n\nOutput\n\nr – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getsm_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_getsm_r!","text":"mad_ctpsa_getsm_r!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cint}, r::Ptr{ComplexF64})\n\nGets the coefficient of the monomial m defined as a sparse monomial in place. Generally should use mad_tpsa_cycle instead of this.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as sparse monomial\n\nOutput\n\nr – Coefficient of monomial m in TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_set0_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_set0_r!","text":"mad_ctpsa_set0_r!(t::Ptr{CTPSA}, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble)\n\nSets the 0th order coefficient (scalar part of TPSA) according to coef[0] = a*coef[0] + b. Does not modify other values in TPSA. Equivalent to mad_ctpsa_set0 but without complex-by-value arguments.\n\nInput\n\nt    – TPSA\na_re – Real part of a\na_im – Imaginary part of a\nb_re – Real part of b\nb_im – Imaginary part of b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_seti_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_seti_r!","text":"mad_ctpsa_seti_r!(t::Ptr{CTPSA}, i::Cint, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble)\n\nSets the coefficient of monomial at index i to coef[i] = a*coef[i] + b. Does not modify other values in TPSA. Equivalent to mad_ctpsa_seti but without complex-by-value arguments.\n\nInput\n\nt – TPSA\ni – Index of monomial\na_re – Real part of a\na_im – Imaginary part of a\nb_re – Real part of b\nb_im – Imaginary part of b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sets_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_sets_r!","text":"mad_ctpsa_sets_r!(t::Ptr{CTPSA}, n::Cint, s::Cstring, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble)\n\nSets the coefficient of monomial defined by string s to coef = a*coef + b. Does not modify other values in TPSA. Equivalent to mad_ctpsa_set but without complex-by-value arguments.\n\nInput\n\nt – TPSA\nn – Length of monomial\ns – Monomial as string\na_re – Real part of a\na_im – Imaginary part of a\nb_re – Real part of b\nb_im – Imaginary part of b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setm_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_setm_r!","text":"mad_ctpsa_setm_r!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar}, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble)\n\nSets the coefficient of monomial defined by byte array m to coef = a*coef + b. Does not modify other values in TPSA. Equivalent to mad_ctpsa_setm but without complex-by-value arguments.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as byte array\na_re – Real part of a\na_im – Imaginary part of a\nb_re – Real part of b\nb_im – Imaginary part of b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setsm_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_setsm_r!","text":"mad_ctpsa_setsm_r!(t::Ptr{CTPSA}, n::Cint, m::Ptr{Cint}, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble)\n\nSets the coefficient of monomial defined by sparse monomial m to coef = a*coef + b. Does not modify other values in TPSA. Equivalent to mad_ctpsa_setsm but without complex-by-value arguments.\n\nInput\n\nt – TPSA\nn – Length of monomial\nm – Monomial as sparse monomial\na_re – Real part of a\na_im – Imaginary part of a\nb_re – Real part of b\nb_im – Imaginary part of b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_getv!","page":"For Developers","title":"GTPSA.mad_ctpsa_getv!","text":"mad_ctpsa_getv!(t::Ptr{CTPSA}, i::Cint, n::Cint, v::Ptr{ComplexF64})\n\nVectorized getter of the coefficients for monomials with indices i..i+n. Useful for extracting the 1st order parts of  a TPSA to construct a matrix (i = 1, n = nv+np = nn). \n\nInput\n\nt – TPSA\ni – Starting index of monomials to get coefficients\nn – Number of monomials to get coefficients of starting at i\n\nOutput\n\nv – Array of coefficients for monomials i..i+n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_setv!","page":"For Developers","title":"GTPSA.mad_ctpsa_setv!","text":"mad_ctpsa_setv!(t::Ptr{CTPSA}, i::Cint, n::Cint, v::Ptr{ComplexF64})\n\nVectorized setter of the coefficients for monomials with indices i..i+n. Useful for putting a matrix into a map.\n\nInput\n\nt – TPSA\ni – Starting index of monomials to set coefficients\nn – Number of monomials to set coefficients of starting at i\nv – Array of coefficients for monomials i..i+n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_equ","page":"For Developers","title":"GTPSA.mad_ctpsa_equ","text":"mad_ctpsa_equ(a::Ptr{CTPSA}, b::Ptr{CTPSA}, tol_::Cdouble)::Cuchar\n\nChecks if the TPSAs a and b are equal within the specified tolerance tol_. If tol_ is not specified, DBL_EPSILON is used.\n\nInput\n\na    – TPSA a\nb    – TPSA b\ntol_ – (Optional) Difference below which the TPSAs are considered equal\n\nOutput\n\nret   - True if a == b within tol_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_dif!","page":"For Developers","title":"GTPSA.mad_ctpsa_dif!","text":"mad_ctpsa_dif!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nFor each homogeneous polynomial in TPSAs a and b, calculates either the relative error or absolute error for each order. If the maximum coefficient for a given order in a is > 1, the relative error is computed for that order. Else, the absolute  error is computed. This is very useful for comparing maps between codes or doing unit tests. In Julia, essentially:\n\nc_i = (a_i.-b_i)/maximum([abs.(a_i)...,1]) where a_i and b_i are vectors of the monomials for an order i\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_add!","page":"For Developers","title":"GTPSA.mad_ctpsa_add!","text":"mad_ctpsa_add!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a + b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a + b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sub!","page":"For Developers","title":"GTPSA.mad_ctpsa_sub!","text":"mad_ctpsa_sub!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a - b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a - b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_mul!","page":"For Developers","title":"GTPSA.mad_ctpsa_mul!","text":"mad_ctpsa_mul!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a * b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a * b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_div!","page":"For Developers","title":"GTPSA.mad_ctpsa_div!","text":"mad_ctpsa_div!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a / b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a / b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_pow!","page":"For Developers","title":"GTPSA.mad_ctpsa_pow!","text":"mad_ctpsa_pow!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a ^ b\n\nInput\n\na – Source TPSA a\nb – Source TPSA b\n\nOutput\n\nc – Destination TPSA c = a ^ b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_powi!","page":"For Developers","title":"GTPSA.mad_ctpsa_powi!","text":"mad_ctpsa_powi!(a::Ptr{CTPSA}, n::Cint, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a ^ n where n is an integer.\n\nInput\n\na – Source TPSA a\nn – Integer power\n\nOutput\n\nc – Destination TPSA c = a ^ n\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_pown!","page":"For Developers","title":"GTPSA.mad_ctpsa_pown!","text":"mad_ctpsa_pown!(a::Ptr{CTPSA}, v::ComplexF64, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a ^ v where v is of double precision.\n\nInput\n\na – Source TPSA a\nv – Power, ComplexF64\n\nOutput\n\nc – Destination TPSA c = a ^ v\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_pown_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_pown_r!","text":"mad_ctpsa_pown_r!(a::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble, c::Ptr{CTPSA})\n\nSets the destination TPSA c = a ^ v where v is of double precision. Without complex-by-value arguments.\n\nInput\n\na    – Source TPSA a\nv_re – Real part of power\nv_im – Imaginary part of power\n\nOutput\n\nc    – Destination TPSA c = a ^ v\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_equt","page":"For Developers","title":"GTPSA.mad_ctpsa_equt","text":"mad_ctpsa_equt(a::Ptr{CTPSA}, b::Ptr{RTPSA}, tol_::Cdouble)::Cuchar\n\nChecks if the CTPSA a is equal to the RTPSA b within the specified tolerance tol_  (internal real-to-complex conversion).\n\nInput\n\na    – CTPSA a\nb    – RTPSA b\ntol_ – (Optional) Difference below which the TPSAs are considered equal\n\nOutput\n\nret   - True if a == b within tol_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_dift!","page":"For Developers","title":"GTPSA.mad_ctpsa_dift!","text":"mad_ctpsa_dift!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nFor each homogeneous polynomial in CTPSA a and RTPSA b, calculates either the relative error or absolute error for each order. If the maximum coefficient for a given order in a is > 1, the relative error is computed for that order. Else, the absolute  error is computed. This is very useful for comparing maps between codes or doing unit tests. In Julia, essentially:\n\nc_i = (a_i.-b_i)/maximum([abs.(a_i)...,1]) where a_i and b_i are vectors of the monomials for an order i\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tdif!","page":"For Developers","title":"GTPSA.mad_ctpsa_tdif!","text":"mad_ctpsa_tdif!(a::Ptr{RTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nFor each homogeneous polynomial in RTPSA a and CTPSA b, calculates either the relative error or absolute error for each order. If the maximum coefficient for a given order in a is > 1, the relative error is computed for that order. Else, the absolute  error is computed. This is very useful for comparing maps between codes or doing unit tests. In Julia, essentially:\n\nc_i = (a_i.-b_i)/maximum([abs.(a_i)...,1]) where a_i and b_i are vectors of the monomials for an order i\n\nInput\n\na – Source RTPSA a\nb – Source CTPSA b\n\nOutput\n\nc – Destination CTPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_addt!","page":"For Developers","title":"GTPSA.mad_ctpsa_addt!","text":"mad_ctpsa_addt!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a + b (internal real-to-complex conversion).\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c = a + b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_subt!","page":"For Developers","title":"GTPSA.mad_ctpsa_subt!","text":"mad_ctpsa_subt!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a - b (internal real-to-complex conversion).\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c = a - b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tsub!","page":"For Developers","title":"GTPSA.mad_ctpsa_tsub!","text":"mad_ctpsa_tsub!(a::Ptr{RTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a - b (internal real-to-complex conversion).\n\nInput\n\na – Source RTPSA a\nb – Source CTPSA b\n\nOutput\n\nc – Destination CTPSA c = a - b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_mult!","page":"For Developers","title":"GTPSA.mad_ctpsa_mult!","text":"mad_ctpsa_mult!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a * b (internal real-to-complex conversion).\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c = a * b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_divt!","page":"For Developers","title":"GTPSA.mad_ctpsa_divt!","text":"mad_ctpsa_divt!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a / b (internal real-to-complex conversion).\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c = a / b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tdiv!","page":"For Developers","title":"GTPSA.mad_ctpsa_tdiv!","text":"mad_ctpsa_tdiv!(a::Ptr{RTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a / b (internal real-to-complex conversion).\n\nInput\n\na – Source RTPSA a\nb – Source CTPSA b\n\nOutput\n\nc – Destination CTPSA c = a / b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_powt!","page":"For Developers","title":"GTPSA.mad_ctpsa_powt!","text":"mad_ctpsa_powt!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a ^ b (internal real-to-complex conversion).\n\nInput\n\na – Source CTPSA a\nb – Source RTPSA b\n\nOutput\n\nc – Destination CTPSA c = a ^ b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tpow!","page":"For Developers","title":"GTPSA.mad_ctpsa_tpow!","text":"mad_ctpsa_tpow!(a::Ptr{RTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets the destination CTPSA c = a ^ b (internal real-to-complex conversion).\n\nInput\n\na – Source RTPSA a\nb – Source CTPSA b\n\nOutput\n\nc – Destination TPSA c = a ^ b\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_nrm","page":"For Developers","title":"GTPSA.mad_ctpsa_nrm","text":"mad_ctpsa_nrm(a::Ptr{CTPSA})::Cdouble\n\nCalculates the 1-norm of TPSA a (sum of abs of all coefficients)\n\nInput\n\na   – TPSA\n\nOutput\n\nnrm – 1-Norm of TPSA a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_conj!","page":"For Developers","title":"GTPSA.mad_ctpsa_conj!","text":"mad_ctpsa_conj(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nCalculates the complex conjugate of of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = conj(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sqrt!","page":"For Developers","title":"GTPSA.mad_ctpsa_sqrt!","text":"mad_ctpsa_sqrt!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the sqrt of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sqrt(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_exp!","page":"For Developers","title":"GTPSA.mad_ctpsa_exp!","text":"mad_ctpsa_exp!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the exp of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = exp(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_log!","page":"For Developers","title":"GTPSA.mad_ctpsa_log!","text":"mad_ctpsa_log!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the log of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = log(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sincos!","page":"For Developers","title":"GTPSA.mad_ctpsa_sincos!","text":"mad_ctpsa_sincos!(a::Ptr{CTPSA}, s::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA s = sin(a) and TPSA c = cos(a)\n\nInput\n\na – Source TPSA a\n\nOutput\n\ns – Destination TPSA s = sin(a)\nc – Destination TPSA c = cos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sin!","page":"For Developers","title":"GTPSA.mad_ctpsa_sin!","text":"mad_ctpsa_sin!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the sin of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sin(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cos!","page":"For Developers","title":"GTPSA.mad_ctpsa_cos!","text":"mad_ctpsa_cos!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the cos of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tan!","page":"For Developers","title":"GTPSA.mad_ctpsa_tan!","text":"mad_ctpsa_tan!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the tan of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = tan(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cot!","page":"For Developers","title":"GTPSA.mad_ctpsa_cot!","text":"mad_ctpsa_cot!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the cot of TPSA a.\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cot(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sinc!","page":"For Developers","title":"GTPSA.mad_ctpsa_sinc!","text":"mad_ctpsa_sinc!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the sinc of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sincosh!","page":"For Developers","title":"GTPSA.mad_ctpsa_sincosh!","text":"mad_ctpsa_sincosh!(a::Ptr{CTPSA}, s::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA s = sinh(a) and TPSA c = cosh(a)\n\nInput\n\na – Source TPSA a\n\nOutput\n\ns – Destination TPSA s = sinh(a)\nc – Destination TPSA c = cosh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sinh!","page":"For Developers","title":"GTPSA.mad_ctpsa_sinh!","text":"mad_ctpsa_sinh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the sinh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_cosh!","page":"For Developers","title":"GTPSA.mad_ctpsa_cosh!","text":"mad_ctpsa_cosh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the cosh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = cosh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tanh!","page":"For Developers","title":"GTPSA.mad_ctpsa_tanh!","text":"mad_ctpsa_tanh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the tanh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = tanh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_coth!","page":"For Developers","title":"GTPSA.mad_ctpsa_coth!","text":"mad_ctpsa_coth!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the coth of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = coth(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_sinhc!","page":"For Developers","title":"GTPSA.mad_ctpsa_sinhc!","text":"mad_ctpsa_sinhc!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the sinhc of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = sinhc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_asin!","page":"For Developers","title":"GTPSA.mad_ctpsa_asin!","text":"mad_ctpsa_asin!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the asin of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asin(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acos!","page":"For Developers","title":"GTPSA.mad_ctpsa_acos!","text":"mad_ctpsa_acos!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the acos of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acos(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_atan!","page":"For Developers","title":"GTPSA.mad_ctpsa_atan!","text":"mad_ctpsa_atan!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the atan of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = atan(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acot!","page":"For Developers","title":"GTPSA.mad_ctpsa_acot!","text":"mad_ctpsa_acot!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the acot of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acot(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_asinc!","page":"For Developers","title":"GTPSA.mad_ctpsa_asinc!","text":"mad_ctpsa_asinc!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the asinc(a) = asin(a)/a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asinc(a) = asin(a)/a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_asinh!","page":"For Developers","title":"GTPSA.mad_ctpsa_asinh!","text":"mad_ctpsa_asinh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the asinh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asinh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acosh!","page":"For Developers","title":"GTPSA.mad_ctpsa_acosh!","text":"mad_ctpsa_acosh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the acosh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acosh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_atanh!","page":"For Developers","title":"GTPSA.mad_ctpsa_atanh!","text":"mad_ctpsa_atanh!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the atanh of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = atanh(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acoth!","page":"For Developers","title":"GTPSA.mad_ctpsa_acoth!","text":"mad_ctpsa_acoth!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the acoth of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = acoth(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_asinhc!","page":"For Developers","title":"GTPSA.mad_ctpsa_asinhc!","text":"mad_ctpsa_asinhc!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the asinhc of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = asinhc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_erf!","page":"For Developers","title":"GTPSA.mad_ctpsa_erf!","text":"mad_ctpsa_erf!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the erf of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = erf(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_erfc!","page":"For Developers","title":"GTPSA.mad_ctpsa_erfc!","text":"mad_ctpsa_erfc!(a::Ptr{CTPSA}, c::Ptr{CTPSA})\n\nSets TPSA c to the erfc of TPSA a\n\nInput\n\na – Source TPSA a\n\nOutput\n\nc – Destination TPSA c = erfc(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acc!","page":"For Developers","title":"GTPSA.mad_ctpsa_acc!","text":"mad_ctpsa_acc!(a::Ptr{CTPSA}, v::ComplexF64, c::Ptr{CTPSA})\n\nAdds a*v to TPSA c. Aliasing OK.\n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c += v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_scl!","page":"For Developers","title":"GTPSA.mad_ctpsa_scl!","text":"mad_ctpsa_scl!(a::Ptr{CTPSA}, v::ComplexF64, c::Ptr{CTPSA})\n\nSets TPSA c to v*a. \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_inv!","page":"For Developers","title":"GTPSA.mad_ctpsa_inv!","text":"mad_ctpsa_inv!(a::Ptr{CTPSA},  v::ComplexF64, c::Ptr{CTPSA})\n\nSets TPSA c to v/a. \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v/a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_invsqrt!","page":"For Developers","title":"GTPSA.mad_ctpsa_invsqrt!","text":"mad_ctpsa_invsqrt!(a::Ptr{CTPSA}, v::ComplexF64, c::Ptr{CTPSA})\n\nSets TPSA c to v/sqrt(a). \n\nInput\n\na – Source TPSA a\nv – Scalar with double precision\n\nOutput\n\nc – Destination TPSA c = v/sqrt(a)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_hypot!","page":"For Developers","title":"GTPSA.mad_ctpsa_hypot!","text":"mad_ctpsa_hypot!(x::Ptr{CTPSA}, y::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nSets TPSA r to sqrt(real(x)^2+real(y)^2) + im*sqrt(imag(x)^2+imag(y)^2)\n\nInput\n\nx – Source TPSA x\ny – Source TPSA y\n\nOutput\n\nr – Destination TPSA sqrt(real(x)^2+real(y)^2) + im*sqrt(imag(x)^2+imag(y)^2)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_hypot3!","page":"For Developers","title":"GTPSA.mad_ctpsa_hypot3!","text":"mad_ctpsa_hypot3!(x::Ptr{CTPSA}, y::Ptr{CTPSA}, z::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nSets TPSA r to sqrt(x^2+y^2+z^2).  Does NOT allow for r = x, y, z !!!\n\nInput\n\nx – Source TPSA x\ny – Source TPSA y\nz – Source TPSA z\n\nOutput\n\nr – Destination TPSA r = sqrt(x^2+y^2+z^2)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_integ!","page":"For Developers","title":"GTPSA.mad_ctpsa_integ!","text":"mad_ctpsa_integ!(a::Ptr{CTPSA}, c::Ptr{CTPSA}, iv::Cint)\n\nIntegrates TPSA with respect to the variable with index iv.\n\nInput\n\na  – Source TPSA to integrate\niv – Index of variable to integrate over (e.g. integrate over x, iv = 1). \n\nOutput\n\nc  – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_deriv!","page":"For Developers","title":"GTPSA.mad_ctpsa_deriv!","text":"mad_ctpsa_deriv!(a::Ptr{CTPSA}, c::Ptr{CTPSA}, iv::Cint)\n\nDifferentiates TPSA with respect to the variable with index iv.\n\nInput\n\na  – Source TPSA to differentiate\niv – Index of variable to take derivative wrt to (e.g. derivative wrt x, iv = 1). \n\nOutput\n\nc  – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_derivm!","page":"For Developers","title":"GTPSA.mad_ctpsa_derivm!","text":"mad_ctpsa_derivm!(a::Ptr{CTPSA}, c::Ptr{CTPSA}, n::Cint, m::Ptr{Cuchar})\n\nDifferentiates TPSA with respect to the monomial defined by byte array m.\n\nInput\n\na – Source TPSA to differentiate\nn – Length of monomial to differentiate wrt\nm – Monomial to take derivative wrt\n\nOutput\n\nc – Destination TPSA\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_poisbra!","page":"For Developers","title":"GTPSA.mad_ctpsa_poisbra!","text":"mad_ctpsa_poisbra!(a::Ptr{CTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA}, nv::Cint)\n\nSets TPSA c to the poisson bracket of TPSAs a and b.\n\nInput\n\na  – Source TPSA a\nb  – Source TPSA b\nnv – Number of variables in the TPSA\n\nOutput\n\nc  – Destination TPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_taylor!","page":"For Developers","title":"GTPSA.mad_ctpsa_taylor!","text":"mad_ctpsa_taylor!(a::Ptr{CTPSA}, n::Cint, coef::Ptr{ComplexF64}, c::Ptr{CTPSA})\n\nComputes the result of the Taylor series up to order n-1 with Taylor coefficients coef for the scalar value in a. That is, c = coef[0] + coef[1]*a_0 + coef[2]*a_0^2 + ... where a_0 is the scalar part of TPSA a\n\nInput\n\na    – TPSA a\nn    – Order-1 of Taylor expansion, size of coef array\ncoef – Array of coefficients in Taylor s\nc    – Result\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_poisbrat!","page":"For Developers","title":"GTPSA.mad_ctpsa_poisbrat!","text":"mad_ctpsa_poisbrat!(a::Ptr{CTPSA}, b::Ptr{RTPSA}, c::Ptr{CTPSA}, nv::Cint)\n\nSets TPSA c to the poisson bracket of CTPSA aand RTPSA b (internal real-to-complex conversion).\n\nInput\n\na  – Source CTPSA a\nb  – Source RTPSA b\nnv – Number of variables in the TPSA\n\nOutput\n\nc  – Destination CTPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_tpoisbra!","page":"For Developers","title":"GTPSA.mad_ctpsa_tpoisbra!","text":"mad_ctpsa_tpoisbra!(a::Ptr{RTPSA}, b::Ptr{CTPSA}, c::Ptr{CTPSA}, nv::Cint)\n\nSets TPSA c to the poisson bracket of RTPSA a and CTPSA b (internal real-to-complex conversion).\n\nInput\n\na  – Source RTPSA a\nb  – Source CTPSA b\nnv – Number of variables in the TPSA\n\nOutput\n\nc  – Destination CTPSA c\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_acc_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_acc_r!","text":"mad_ctpsa_acc_r!(a::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble, c::Ptr{CTPSA})\n\nAdds a*v to TPSA c. Aliasing OK. Without complex-by-value arguments.\n\nInput\n\na    – Source TPSA a\nv_re – Real part of scalar with double precision\nv_im – Imaginary part of scalar with double precision\n\nOutput\n\nc    – Destination TPSA c += v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_scl_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_scl_r!","text":"mad_ctpsa_scl_r!(a::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble,, c::Ptr{CTPSA})\n\nSets TPSA c to v*a.  Without complex-by-value arguments.\n\nInput\n\na    – Source TPSA a\nv_re – Real part of scalar with double precision\nv_im – Imaginary part of scalar with double precision\n\nOutput\n\nc    – Destination TPSA c = v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_inv_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_inv_r!","text":"mad_ctpsa_inv_r!(a::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble, c::Ptr{CTPSA})\n\nSets TPSA c to v/a.  Without complex-by-value arguments.\n\nInput\n\na    – Source TPSA a\nv_re – Real part of scalar with double precision\nv_im – Imaginary part of scalar with double precision\n\nOutput\n\nc    – Destination TPSA c = v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_invsqrt_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_invsqrt_r!","text":"mad_ctpsa_invsqrt_r!(a::Ptr{CTPSA}, v_re::Cdouble, v_im::Cdouble, c::Ptr{CTPSA})\n\nSets TPSA c to v/sqrt(a). Without complex-by-value arguments.\n\nInput\n\na    – Source TPSA a\nv_re – Real part of scalar with double precision\nv_im – Imaginary part of scalar with double precision\n\nOutput\n\nc    – Destination TPSA c = v*a\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpb!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpb!","text":"mad_ctpsa_axpb!(a::ComplexF64, x::Ptr{CTPSA}, b::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x + b\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpbypc!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpbypc!","text":"mad_ctpsa_axpbypc!(a::ComplexF64, x::Ptr{CTPSA}, b::ComplexF64, y::Ptr{CTPSA}, c::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x+b*y+c\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\ny – TPSA y\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypb!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypb!","text":"mad_ctpsa_axypb!(a::ComplexF64, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x*y + b\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypbzpc!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypbzpc!","text":"mad_ctpsa_axypbzpc!(a::ComplexF64, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b::ComplexF64, z::Ptr{CTPSA}, c::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x*y + b*z + c\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\nz – TPSA z\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypbvwpc!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypbvwpc!","text":"mad_ctpsa_axypbvwpc!(a::ComplexF64, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b::ComplexF64, v::Ptr{CTPSA}, w::Ptr{CTPSA}, c::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x*y + b*v*w + c\n\nInput\n\na – Scalar a\nx – TPSA x\ny – TPSA y\nb – Scalar b\nv – TPSA v\nw – TPSA w\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_ax2pby2pcz2!","page":"For Developers","title":"GTPSA.mad_ctpsa_ax2pby2pcz2!","text":"mad_ctpsa_ax2pby2pcz2!(a::ComplexF64, x::Ptr{CTPSA}, b::ComplexF64, y::Ptr{CTPSA}, c::ComplexF64, z::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nr = a*x^2 + b*y^2 + c*z^2\n\nInput\n\na – Scalar a\nx – TPSA x\nb – Scalar b\ny – TPSA y\nc – Scalar c\nz – TPSA z\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpsqrtbpcx2!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpsqrtbpcx2!","text":"mad_ctpsa_axpsqrtbpcx2!(x::Ptr{CTPSA}, a::ComplexF64, b::ComplexF64, c::ComplexF64, r::Ptr{CTPSA})\n\nr = a*x + sqrt(b + c*x^2)\n\nInput\n\nx – TPSA x\na – Scalar a\nb – Scalar b\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_logaxpsqrtbpcx2!","page":"For Developers","title":"GTPSA.mad_ctpsa_logaxpsqrtbpcx2!","text":"mad_ctpsa_logaxpsqrtbpcx2!(x::Ptr{CTPSA}, a::ComplexF64, b::ComplexF64, c::ComplexF64, r::Ptr{CTPSA})\n\nr = log(a*x + sqrt(b + c*x^2))\n\nInput\n\nx – TPSA x\na – Scalar a\nb – Scalar b\nc – Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_logxdy!","page":"For Developers","title":"GTPSA.mad_ctpsa_logxdy!","text":"mad_ctpsa_logxdy!(x::Ptr{CTPSA}, y::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nr = log(x / y)\n\nInput\n\nx – TPSA x\ny – TPSA y\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpb_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpb_r!","text":"mad_ctpsa_axpb_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x + b. Same as mad_ctpsa_axpb without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpbypc_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpbypc_r!","text":"mad_ctpsa_axpbypc_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, y::Ptr{CTPSA}, c_re::Cdouble, c_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x + b*y + c. Same as mad_ctpsa_axpbypc without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\ny    – TPSA y\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypb_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypb_r!","text":"mad_ctpsa_axypb_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x*y + b. Same as mad_ctpsa_axypb without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\ny    – TPSA y\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypbzpc_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypbzpc_r!","text":"mad_ctpsa_axypbzpc_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, z::Ptr{CTPSA}, c_re::Cdouble, c_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x*y + b*z + c. Same as mad_ctpsa_axypbzpc without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\ny    – TPSA y\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\nz    – TPSA z\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axypbvwpc_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axypbvwpc_r!","text":"mad_ctpsa_axypbvwpc_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, y::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, v::Ptr{CTPSA}, w::Ptr{CTPSA}, c_re::Cdouble, c_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x*y + b*v*w + c. Same as mad_ctpsa_axypbvwpc without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\ny    – TPSA y\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\nv    – TPSA v\nw    – TPSA w\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_ax2pby2pcz2_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_ax2pby2pcz2_r!","text":"mad_ctpsa_ax2pby2pcz2_r!(a_re::Cdouble, a_im::Cdouble, x::Ptr{CTPSA}, b_re::Cdouble, b_im::Cdouble, y::Ptr{CTPSA}, c_re::Cdouble, c_im::Cdouble, z::Ptr{CTPSA}, r::Ptr{CTPSA})\n\nr = a*x^2 + b*y^2 + c*z^2. Same as mad_ctpsa_ax2pby2pcz2 without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nx    – TPSA x\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\ny    – TPSA y\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\nz    – TPSA z\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_axpsqrtbpcx2_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_axpsqrtbpcx2_r!","text":"mad_ctpsa_axpsqrtbpcx2_r!(x::Ptr{CTPSA}, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble, c_re::Cdouble, c_im::Cdouble, r::Ptr{CTPSA})\n\nr = a*x + sqrt(b + c*x^2). Same as mad_ctpsa_axpsqrtbpcx2 without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_logaxpsqrtbpcx2_r!","page":"For Developers","title":"GTPSA.mad_ctpsa_logaxpsqrtbpcx2_r!","text":"mad_ctpsa_logaxpsqrtbpcx2_r!(x::Ptr{CTPSA}, a_re::Cdouble, a_im::Cdouble, b_re::Cdouble, b_im::Cdouble, c_re::Cdouble, c_im::Cdouble, r::Ptr{CTPSA})\n\nr = log(a*x + sqrt(b + c*x^2)). Same as mad_ctpsa_logaxpsqrtbpcx2 without complex-by-value arguments.\n\nInput\n\na_re – Real part of Scalar a\na_im – Imag part of Scalar a\nb_re – Real part of Scalar b\nb_im – Imag part of Scalar b\nc_re – Real part of Scalar c\nc_im – Imag part of Scalar c\n\nOutput\n\nr – Destination TPSA r\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_vec2fld!","page":"For Developers","title":"GTPSA.mad_ctpsa_vec2fld!","text":"mad_ctpsa_vec2fld!(na::Cint, a::Ptr{CTPSA}, mc::Ptr{Ptr{CTPSA}})\n\n???\n\nInput\n\nna\na\nmc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_fld2vec!","page":"For Developers","title":"GTPSA.mad_ctpsa_fld2vec!","text":"mad_ctpsa_fld2vec!(na::Cint, ma::Ptr{Ptr{CTPSA}}, c::Ptr{CTPSA})\n\n???\n\nInput\n\nna\nma\nc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_fgrad!","page":"For Developers","title":"GTPSA.mad_ctpsa_fgrad!","text":"mad_ctpsa_fgrad!(na::Cint, ma::Ptr{Ptr{CTPSA}}, b::Ptr{CTPSA}, c::Ptr{CTPSA})\n\n???\n\nInput\n\nna\nma\nb\nc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_liebra!","page":"For Developers","title":"GTPSA.mad_ctpsa_liebra!","text":"mad_ctpsa_liebra!(na::Cint, ma::Ptr{Ptr{CTPSA}}, mb::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}})\n\nComputes the Lie bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in map ma and map mb\nma – Map ma\nmb – Map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_exppb!","page":"For Developers","title":"GTPSA.mad_ctpsa_exppb!","text":"mad_ctpsa_exppb!(na::Cint, ma::Ptr{Ptr{CTPSA}}, mb::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}})\n\nComputes the exponential of the Poisson bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in Map ma and map mb\nma – Map ma\nmb – Map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_logpb!","page":"For Developers","title":"GTPSA.mad_ctpsa_logpb!","text":"mad_ctpsa_logpb!(na::Cint, ma::Ptr{Ptr{CTPSA}}, mb::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}})\n\nComputes the log of the Poisson bracket of the maps ma and mb.\n\nInput\n\nna – Number of TPSAs in Map ma and map mb\nma – Map ma\nmb – Map mb\n\nOutput\n\nmc – Destination map mc\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_mnrm","page":"For Developers","title":"GTPSA.mad_ctpsa_mnrm","text":"mad_ctpsa_mnrm(na::Cint, ma::Ptr{Ptr{CTPSA}})::Cdouble\n\nComputes the norm of the map (sum of absolute value of coefficients of all TPSAs in the map).\n\nInput\n\nna  – Number of TPSAs in the map\nma  – Map ma\n\nOutput\n\nnrm – Norm of map (sum of absolute value of coefficients of all TPSAs in the map)\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_minv!","page":"For Developers","title":"GTPSA.mad_ctpsa_minv!","text":"mad_ctpsa_minv!(na::Cint, ma::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}})\n\nInverts the map.\n\nInput\n\nna – Number of TPSAs in the map\nma – Map ma\n\nOutput\n\nmc – Inversion of Map ma\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_pminv!","page":"For Developers","title":"GTPSA.mad_ctpsa_pminv!","text":"mad_ctpsa_pminv!(na::Cint, ma::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}}, select::Ptr{Cint})\n\nComputes the partial inverse of the map with only the selected variables, specified by 0s or 1s in select.\n\nInput\n\nna     – Number of TPSAs in ma\nma     – Map ma\nselect – Array of 0s or 1s defining which variables to do inverse on (atleast same size as na)\n\nOutput\n\nmc     – Partially inverted map using variables specified as 1 in the select array\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_compose!","page":"For Developers","title":"GTPSA.mad_ctpsa_compose!","text":"mad_ctpsa_compose!(na::Cint, ma::Ptr{Ptr{CTPSA}}, nb::Cint, mb::Ptr{Ptr{CTPSA}}, mc::Ptr{Ptr{CTPSA}})\n\nComposes two maps.\n\nInput\n\nna – Number of TPSAs in Map ma\nma – Map ma\nnb – Number of TPSAs in Map mb\nmb – Map mb\n\nOutput\n\nmc – Composition of maps ma and mb\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_translate!","page":"For Developers","title":"GTPSA.mad_ctpsa_translate!","text":"mad_ctpsa_translate!(na::Cint, ma::Ptr{Ptr{CTPSA}}, nb::Cint, tb::Ptr{ComplexF64}, mc::Ptr{Ptr{CTPSA}})\n\nTranslates the expansion point of the map by the amount tb.\n\nInput\n\nna – Number of TPSAS in the map\nma – Map ma\nnb – Length of tb\ntb – Vector of amount to translate for each variable\n\nOutput\n\nmc – Map evaluated at the new point translated tb from the original evaluation point\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_eval!","page":"For Developers","title":"GTPSA.mad_ctpsa_eval!","text":"mad_ctpsa_eval!(na::Cint, ma::Ptr{Ptr{CTPSA}}, nb::Cint, tb::Ptr{ComplexF64}, tc::Ptr{ComplexF64})\n\nEvaluates the map at the point tb\n\nInput\n\nna – Number of TPSAs in the map\nma – Map ma\nnb – Length of tb\ntb – Point at which to evaluate the map\n\nOutput\n\ntc – Values for each TPSA in the map evaluated at the point tb\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_mconv!","page":"For Developers","title":"GTPSA.mad_ctpsa_mconv!","text":"mad_ctpsa_mconv!(na::Cint, ma::Ptr{Ptr{CTPSA}}, nc::Cint, mc::Ptr{Ptr{CTPSA}}, n::Cint, t2r_::Ptr{Cint}, pb::Cint)\n\nEquivalent to mad_tpsa_convert, but applies the conversion to all TPSAs in the map ma.\n\nInput\n\nna   – Number of TPSAs in the map\nma   – Map ma\nnc   – Number of TPSAs in the output map mc\nn    – Length of vector (size of t2r_)\nt2r_ – (Optional) Vector of index lookup\npb   – Poisson bracket, 0, 1:fwd, -1:bwd\n\nOutput\n\nmc   – Map mc with specified conversions \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_print","page":"For Developers","title":"GTPSA.mad_ctpsa_print","text":"mad_ctpsa_print(t::Ptr{CTPSA}, name_::Cstring, eps_::Cdouble, nohdr_::Cint, stream_::Ptr{Cvoid})\n\nPrints the TPSA coefficients with precision eps_. If nohdr_ is not zero,  the header is not printed. \n\nInput\n\nt       – TPSA to print\nname_   – (Optional) Name of TPSA\neps_    – (Optional) Precision to output\nnohdr_  – (Optional) If True, no header is printed\nstream_ – (Optional) FILE pointer of output stream. Default is stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_scan","page":"For Developers","title":"GTPSA.mad_ctpsa_scan","text":"mad_ctpsa_scan(stream_::Ptr{Cvoid})::Ptr{CTPSA}\n\nScans in a TPSA from the stream_.\n\nInput\n\nstream_ – (Optional) I/O stream from which to read the TPSA, default is stdin\n\nOutput\n\nt       – TPSA scanned from I/O stream_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_scan_hdr","page":"For Developers","title":"GTPSA.mad_ctpsa_scan_hdr","text":"mad_ctpsa_scan_hdr(kind_::Ptr{Cint}, name_::Ptr{Cuchar}, stream_::Ptr{Cvoid})::Ptr{Desc}\n\nRead TPSA header. Returns descriptor for TPSA given the header. This is useful for external languages using  this library where the memory is managed NOT on the C side.\n\nInput\n\nkind_   – (Optional) Real or complex TPSA, or detect automatically if not provided.\nname_   – (Optional) Name of TPSA\nstream_ – (Optional) I/O stream to read TPSA from,  default is stdin\n\nOutput\n\nret     – Descriptor for the TPSA \n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_scan_coef!","page":"For Developers","title":"GTPSA.mad_ctpsa_scan_coef!","text":"mad_ctpsa_scan_coef!(t::Ptr{CTPSA}, stream_::Ptr{Cvoid})\n\nRead TPSA coefficients into TPSA t. This should be used with mad_tpsa_scan_hdr for external languages using  this library where the memory is managed NOT on the C side.\n\nInput\n\nstream_ – (Optional) I/O stream to read TPSA from, default is stdin\n\nOutput\n\nt       – TPSA with coefficients scanned from stream_\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_debug","page":"For Developers","title":"GTPSA.mad_ctpsa_debug","text":"mad_ctpsa_debug(t::Ptr{CTPSA}, name_::Cstring, fnam_::Cstring, line_::Cint, stream_::Ptr{Cvoid})\n\nPrints TPSA with all information of data structure.\n\nInput\n\nt       – TPSA\nname_   – (Optional) Name of TPSA\nfnam_   – (Optional) File name to print to\nline_   – (Optional) Line number in file to start at\nstream_ – (Optional) I/O stream to print to, default is stdout\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_isvalid","page":"For Developers","title":"GTPSA.mad_ctpsa_isvalid","text":"mad_ctpsa_isvalid(t::Ptr{CTPSA})::Cuchar\n\nSanity check of the TPSA integrity.\n\nInput\n\nt – Complex TPSA to check if valid\n\nOutput\n\nret  – True if valid TPSA, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"devel/#GTPSA.mad_ctpsa_init!","page":"For Developers","title":"GTPSA.mad_ctpsa_init!","text":"mad_ctpsa_init(t::Ptr{CTPSA}, d::Ptr{Desc}, mo::Cuchar)::Ptr{CTPSA}\n\nUnsafe initialization of an already existing TPSA t with maximum order mo to the descriptor d. mo must be less than  the maximum order of the descriptor. t is modified in place and also returned.\n\nInput\n\nt  – TPSA to initialize to descriptor d\nd  – Descriptor\nmo – Maximum order of the TPSA (must be less than maximum order of the descriptor)\n\nOutput\n\nt  – TPSA initialized to descriptor d with maximum order mo\n\n\n\n\n\n","category":"function"},{"location":"#GTPSA.jl","page":"Home","title":"GTPSA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia interface to the Generalised Truncated Power Series Algebra (GTPSA) library in MAD.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a full-featured Julia interface to the Generalised Truncated Power Series Algebra (GTPSA) library, which computes Taylor expansions, or Truncated Power Series (TPSs) of real and complex multivariable functions to arbitrary orders in the variables. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"GTPSA, which uses the Truncated Power Series Algebra method for performing automatic differentation (AD), has several advantages over current Julia AD packages:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Speed and Accuracy: Because the TPSA method does not take any symbolic derivatives, nor use finite differencing, derivatives are calculated with high efficiency and accuracy\nArbitrary Orders in Individual Variables: For example, computing the Taylor expansion of f(x_1x_2) to 5th order in x_1 and 1st order in x_2 is done trivially in GTPSA\nAll Taylor Coefficients Stored: GTPSA implements an efficient monomial coefficient indexing function for high speed even with TPSs having large number of variables to high orders\nDistinction Between \"Variables\" and \"Parameters\": When the TPS represents a Taylor map of a dynamical system, which defines the evolution of map variables given some variations in map parameters, distinguishing between the two proves advantageous for analyses of Taylor maps, such as normal form","category":"page"},{"location":"","page":"Home","title":"Home","text":"GTPSA is fast! See the benchmark/taylormap.jl example for a speed comparison of GTPSA.jl with ForwardDiff.jl and TaylorSeries.jl in calculating a multivariable Taylor map to 2nd order.","category":"page"},{"location":"#Setup","page":"Home","title":"Setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use GTPSA.jl, in the Julia REPL run","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/bmad-sim/GTPSA.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"For developers,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] dev https://github.com/bmad-sim/GTPSA.jl.git","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, a Descriptor must be created specifying the number of variables, number of parameters, the orders of each variable, and the orders of each parameter for the TPSA. The Descriptor stores all of the monomial indexing/lookup information for TPSs in the TPSA, based on these values. A TPS or ComplexTPS can then be created based on the Descriptor. TPSs can be manipulated using all of the elementary math operators (+,-,*,/,^) and math functions (e.g. abs, sqrt, sin, exp, log, coth, etc.).","category":"page"},{"location":"","page":"Home","title":"Home","text":"TPSs can be viewed as structures containing the coefficients for all of the monomials of a multivariable Taylor expansion up to the orders specified in the Descriptor. As an example, to compute the truncated power series of a function f(x_1x_2) = x_1^2fracsin(2+x_1x_2)exp(x_1+x_2) to 15th order in x_1 and x_2:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using GTPSA\n\n# Define the Descriptor for the TPSA\nd = Descriptor(2, 15)\n\n# Get the TPSs corresponding to each variable based on the Descriptor\nx = vars(d)\n\n# Manipulate the TPSs as you would any other mathematical variable in Julia\nf = x[1]^2*sin(2+x[1]*x[2])/exp(x[1]+x[2])","category":"page"},{"location":"","page":"Home","title":"Home","text":"f itself is a TPS. Note that scalars do not need to be defined as TPSs when writing expressions. Running print(f) then gives the output","category":"page"},{"location":"","page":"Home","title":"Home","text":"         :  R, NV =   2, MO = 15\n *******************************************************\n     I   COEFFICIENT             ORDER   EXPONENTS\n     1   9.0929742682568171E-01    2     2 0\n     2   0.0000000000000000E+00    2     1 1\n     3   0.0000000000000000E+00    2     0 2\n     4  -9.0929742682568171E-01    3     3 0\n     5  -9.0929742682568171E-01    3     2 1\n     6   0.0000000000000000E+00    3     1 2\n     7   0.0000000000000000E+00    3     0 3\n     8   4.5464871341284085E-01    4     4 0\n     9   4.9315059027853930E-01    4     3 1\n    10   4.5464871341284085E-01    4     2 2\n    11   0.0000000000000000E+00    4     1 3\n    12   0.0000000000000000E+00    4     0 4\n    13  -1.5154957113761358E-01    5     5 0\n    14  -3.8501876865698448E-02    5     4 1\n                    ...","category":"page"},{"location":"","page":"Home","title":"Home","text":"This print function will be rewritten.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For multivariable TPSs including variables/parameters with different individual orders, and complex TPSs, see Usage.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Advanced users are referred to this paper written by the developers of the GTPSA library for more details.","category":"page"},{"location":"#Acknowledgements","page":"Home","title":"Acknowledgements","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We thank Laurent Deniau, the creator of GTPSA, for very detailed and lengthy discussions on using his C library. ","category":"page"}]
}
